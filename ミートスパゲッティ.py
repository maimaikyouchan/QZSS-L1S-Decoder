import re
import datetime

# 変換過程を表示したい時は"True"にする
debugmode = False

# MT43地域判定設定(pleew_dの中から最大1つの"地域"まで。全国は"all" 判定なしは"none")
eew_prefset = "all"  # 緊急地震速報
ep_prefset = "all"  # 震源情報
sipl_prefset = "all"
tsu_prefset = "all"  # 津波情報鹿行
marin_prefset = "all"  # 海上気象
typoon_prefset = "all"  # 台風情報
flood_prefset = "all"  # 洪水情報


# 南海トラフ地震に関する情報に対象地域フラグをつけるか(bool式のため、TrueまたはFalseにする)
nankaieq = True

# 北西太平洋津波情報に対象地域フラグをつけるか(bool式のため、TrueまたはFalseにする)
nwtpinfo = True

# MT44地域判定設定(最大1つまで。指定しない場合は空欄にする。)
prefset44 = "all"

# 時刻修正(日本は＋９時間)
utctimeshift = 9

raw_msg = input("Data:")


# Satellite ID 抽出
sid_d = {
    0: "",
    55: "PRN183",
    56: "PRN184",
    57: "PRN185",
    58: "PRN186",
    61: "PRN189",
    9998: "PRN9998(みちびき６用)",  # 使わないけどとりあえず記載
    9999: "",
}
sidj_d = {
    0: "",
    55: "みちびき初号機(QZS01)",  # 2022年3月25日信号送信停止
    56: "みちびき２(QZS02)",
    57: "みちびき４(QZS04)",
    58: "みちびき初号機後継機(QZS1R)",
    61: "みちびき３(QZS03)",
    9998: "みちびき６(QZS06)",  # 使わないけどとりあえず記載
    9999: "SIDなし",
}
# Satellite ID 有無判定
if "$QZQSM" in raw_msg:
    sid = int(raw_msg[7:9])  # シリアル(a)から受け取った文字列からDCRだけ抽出
    raw_dc = "{}{}".format("0x", raw_msg[10:73])
    raw_dcrm = format(int(raw_dc, 16), "0X")  # DCをそのまま16進数で格納
    input_msg = format(int(raw_dc, 16), "0b")  # 解析処理のために2進数で格納
    sidtext = sid_d[sid], sidj_d[sid]  # 送出衛星表示

else:
    input_msg = raw_msg
    raw_dc = "{}{}".format("0x", raw_msg[0:63])
    raw_dcrm = format(int(raw_dc, 16), "0X")  # DCをそのまま16進数で格納
    input_msg = format(int(raw_dc, 16), "0b")  # 解析処理のために2進数で格納
    sidtext = sid_d[9999], sidj_d[9999]

# Satellite ID 有無判定
if "$QZQSM" in raw_msg:
    sid = int(raw_msg[7:9])  # シリアル(a)から受け取った文字列からDCRだけ抽出
    raw_dc = "{}{}".format("0x", raw_msg[10:73])
    raw_dcrm = format(int(raw_dc, 16), "0X")  # DCをそのまま16進数で格納
    input_msg = format(int(raw_dc, 16), "0b")  # 解析処理のために2進数で格納
    sidtext = sid_d[sid], sidj_d[sid]  # 送出衛星表示

else:
    input_msg = raw_msg
    raw_dc = "{}{}".format("0x", raw_msg[0:63])
    raw_dcrm = format(int(raw_dc, 16), "0X")  # DCをそのまま16進数で格納
    input_msg = format(int(raw_dc, 16), "0b")  # 解析処理のために2進数で格納
    sidtext = sid_d[9999], sidj_d[9999]

# 変換用変数
raw_dcrm = format(int(raw_dc, 16), "0X")  # DCをそのまま16進数で格納
input_msg = format(int(raw_dc, 16), "0b")  # 解析処理のために2進数で格納
bin_msg = input_msg.zfill(253)  # 数値を0埋めしてビットを合わせる


# datetimeから時、分、秒を取得
# Pythonで秒数と分・時間・日数を相互に変換 | note.nkmk.me (秒数を分・時間・日数などに変換)
# https://note.nkmk.me/python-datetime-timedelta-conversion/#_3
def dttd_hour_min_sec(sec):
    m, s = divmod(sec, 60)
    h, m = divmod(m, 60)
    return h, m, s


# 共通抽出
pab_d = {
    83: "PABA",
    154: "PABB",
    198: "PABC",
}
mt_d = {
    0: "試験モード",
    40: "予約",
    41: "予約",
    43: "防災気象情報",
    44: "任意情報",
    63: "NULL",
    47: "監視局情報",
    48: "PRNマスク情報",
    49: "IOD情報",
    50: "DGPS補正",
    51: "衛星ヘルス情報",
}
pab = int(bin_msg[1:9], 2)  # プリアンブル(８３／５４／１９８の３パターン)
mt = int(bin_msg[9:15], 2)  # メッセージタイプ(災危通報は43または44のみ。それ以外は全く違うため弾くようにしたほうがいい)


# MT43解析部
if mt == 43:
    # print("MT43")

    # tree = ET.parse('xml\mt43.xml')
    # root = tree.getroot()
    # 共通
    rc_d = {
        1: "最優先",
        2: "優先",
        3: "通常",
        4: "未定義4",
        5: "未定義5",
        6: "未定義6",
        7: "訓練・試験",
    }
    dc_d = {
        1: "緊急地震速報",
        2: "震源情報",
        3: "震度速報",
        4: "南海トラフ地震に関する情報",
        5: "津波予報",
        6: "北西太平洋津波情報",
        7: "未定義(7)",
        8: "防災気象情報（火山）",
        9: "降灰情報",
        10: "気象情報",
        11: "洪水情報",
        12: "台風情報",
        13: "未使用(13)",
        14: "防災気象情報（海上）",
    }
    it_d = {
        0: "発表",
        2: "取り消し",
        1: "訂正",
    }
    ar_d = {
        1: "発表",
        2: "解除",
    }
    co_d = {
        0: " ",
        101: "今後若干の海面変動があるかもしれません。",
        102: "今後若干の海面変動があるかもしれませんが、被害の心配はありません。",
        103: "今後もしばらく海面変動が続くと思われます。",
        104: "今後もしばらく海面変動が続くと思われますので、海水浴や磯釣り等を行う際は注意してください。",
        105: "今後もしばらく海面変動が続くと思われますので、磯釣り等を行う際は注意してください。",
        107: "現在、大津波警報・津波警報・津波注意報を発表している沿岸はありません。",
        109: "津波と満潮が重なると、津波はより高くなりますので一層厳重な警戒が必要です。",
        110: "津波と満潮が重なると、津波はより高くなりますので十分な注意が必要です。",
        111: "場所によっては、観測した津波の高さよりさらに大きな津波が到達しているおそれがあります。",
        112: "今後、津波の高さは更に高くなることも考えられます。",
        113: "沖合での観測値をもとに津波が推定されている沿岸では、早いところでは、既に津波が到達していると推定されます。",
        114: "津波による潮位変化が観測されてから最大波が観測されるまでに数時間以上かかることがあります。",
        115: "沖合での観測値であり、沿岸では津波はさらに高くなります。",
        121: "＜大津波警報＞大きな津波が襲い甚大な被害が発生します。沿岸部や川沿いにいる人はただちに高台や避難ビルなど安全な場所へ避難してください。津波は繰り返し襲ってきます。警報が解除されるまで安全な場所から離れないでください。",
        122: "＜津波警報＞津波による被害が発生します。沿岸部や川沿いにいる人はただちに高台や避難ビルなど安全な場所へ避難してください。津波は繰り返し襲ってきます。警報が解除されるまで安全な場所から離れないでください。",
        123: "＜津波注意報＞海の中や海岸付近は危険です。海の中にいる人はただちに海から上がって、海岸から離れてください。潮の流れが速い状態が続きますので、注意報が解除されるまで海に入ったり海岸に近づいたりしないようにしてください。",
        124: "＜津波予報(若干の海面変動)＞若干の海面変動が予想されますが、被害の心配はありません。",
        131: "警報が発表された沿岸部や川沿いにいる人はただちに高台や避難ビルなど安全な場所へ避難してください。到達予想時刻は、予報区のなかで最も早く津波が到達する時刻です。場所によっては、この時刻よりもかなり遅れて津波が襲ってくることがあります。到達予想時刻から津波が最も高くなるまでに数時間以上かかることがありますので、観測された津波の高さにかかわらず、警報が解除されるまで安全な場所から離れないでください。",
        132: "場所によっては津波の高さが「予想される津波の高さ」より高くなる可能性があります。",
        141: "東日本大震災クラスの津波が来襲します。",
        142: "沖合で高い津波を観測したため大津波警報・津波警報に切り替えました。",
        143: "沖合で高い津波を観測したため大津波警報・津波警報を切り替えました。",
        144: "沖合で高い津波を観測したため大津波警報に切り替えました。",
        145: "沖合で高い津波を観測したため大津波警報を切り替えました。",
        146: "沖合で高い津波を観測したため津波警報に切り替えました。",
        147: "沖合で高い津波を観測したため津波警報を切り替えました。",
        148: "沖合で高い津波を観測したため予想される津波の高さを切り替えました。",
        149: "ただちに避難してください。",
        201: "強い揺れに警戒してください。",
        211: "津波警報等(大津波警報・津波警報あるいは津波注意報)を発表中です。",
        212: "この地震により、日本の沿岸では若干の海面変動があるかもしれませんが、被害の心配はありません。",
        213: "今後もしばらく海面変動が続くと思われますので、海水浴や磯釣り等を行う際は注意してください。",
        214: "今後もしばらく海面変動が続くと思われますので、磯釣り等を行う際は注意してください。",
        215: "この地震による津波の心配はありません。",
        216: "震源が海底の場合、津波が発生するおそれがあります。",
        217: "今後の情報に注意してください。",
        221: "太平洋の広域に津波発生の可能性があります。",
        222: "太平洋で津波発生の可能性があります。",
        223: "北西太平洋で津波発生の可能性があります。",
        224: "インド洋の広域に津波発生の可能性があります。",
        225: "インド洋で津波発生の可能性があります。",
        226: "震源の近傍で津波発生の可能性があります。",
        227: "震源の近傍で小さな津波発生の可能性がありますが、被害をもたらす津波の心配はありません。",
        228: "一般的に、この規模の地震が海域の浅い領域で発生すると、津波が発生することがあります。",
        229: "日本への津波の有無については現在調査中です。",
        230: "この地震による日本への津波の影響はありません。",
        241: "この地震について、緊急地震速報を発表しています。",
        242: "この地震について、緊急地震速報を発表しています。この地震の最大震度は2でした。",
        243: "この地震について、緊急地震速報を発表しています。この地震の最大震度は1でした。",
        244: "この地震について、緊急地震速報を発表しています。この地震で震度1以上は観測されていません。",
        245: "この地震で緊急地震速報を発表しましたが、強い揺れは観測されませんでした。",
        256: "震源要素を訂正します。",
        500: "その他の防災上の留意事項",
    }

    # 緊急地震速報
    pleew_d = {
        0: "北海道道央",
        1: "北海道道南",
        2: "北海道道北",
        3: "北海道道東",
        4: "青森",
        5: "岩手",
        6: "宮城",
        7: "秋田",
        8: "山形",
        9: "福島",
        10: "茨城",
        11: "栃木",
        12: "群馬",
        13: "埼玉",
        14: "千葉",
        15: "東京",
        16: "伊豆諸島",
        17: "小笠原",
        18: "神奈川",
        19: "新潟",
        20: "富山",
        21: "石川",
        22: "福井",
        23: "山梨",
        24: "長野",
        25: "岐阜",
        26: "静岡",
        27: "愛知",
        28: "三重",
        29: "滋賀",
        30: "京都",
        31: "大阪",
        32: "兵庫",
        33: "奈良",
        34: "和歌山",
        35: "鳥取",
        36: "島根",
        37: "岡山",
        38: "広島",
        39: "山口",
        40: "徳島",
        41: "香川",
        42: "愛媛",
        43: "高知",
        44: "福岡",
        45: "佐賀",
        46: "長崎",
        47: "熊本",
        48: "大分",
        49: "宮崎",
        50: "鹿児島",
        51: "奄美(群島)",
        52: "沖縄本島",
        53: "大東島",
        54: "宮古島",
        55: "八重山",
        56: "北海道",
        57: "東北",
        58: "関東",
        59: "伊豆諸島",
        60: "小笠原",
        61: "北陸",
        62: "甲信",
        63: "東海",
        66: "近畿",
        65: "中国",
        66: "四国",
        67: "九州",
        68: "奄美(群島)",
        69: "沖縄",
        79: "その他の府県予報区および地方予報区_緊急地震速報(警報):",
    }
    ul_d = {
        1: "震度0",
        2: "震度１",
        3: "震度２",
        4: "震度３",
        5: "震度４",
        6: "震度５弱",
        7: "震度５強",
        8: "震度６弱",
        9: "震度６強",
        10: "震度７",
        14: "なし",
        15: "不明",
    }
    ll_d = {
        1: "震度0",
        2: "震度１",
        3: "震度２",
        4: "震度３",
        5: "震度４",
        6: "震度５弱",
        7: "震度５強",
        8: "震度６弱",
        9: "震度６強",
        10: "震度７",
        11: "～程度以上",
        14: "なし",
        15: "不明",
    }
    # 震度速報
    es_d = {
        0: "余白",
        1: "震度４未満",
        2: "震度４",
        3: "震度５弱",
        4: "震度５強",
        5: "震度６弱",
        6: "震度６強",
        7: "震度７",
    }
    LgL1_d = {
        1: "長周期地震動階級 1 未満",
        2: "長周期地震動階級 1",
        3: "長周期地震動階級 2",
        4: "長周期地震動階級 3",
        5: "長周期地震動階級 4",
        6: "未定義",
        7: "不明",
    }
    LgU1_d = {
        1: "長周期地震動階級 1 未満",
        2: "長周期地震動階級 1",
        3: "長周期地震動階級 2",
        4: "長周期地震動階級 3",
        5: "長周期地震動階級 4",
        6: "6 ～程度以上",
        7: "不明",
    }
    sipl_d = {
        0: "余白",
        1: "北海道",
        2: "青森県",
        3: "岩手県",
        4: "宮城県",
        5: "秋田県",
        6: "山形県",
        7: "福島県",
        8: "茨城県",
        9: "栃木県",
        10: "群馬県",
        11: "埼玉県",
        12: "千葉県",
        13: "東京都",
        14: "神奈川県",
        15: "新潟県",
        16: "富山県",
        17: "石川県",
        18: "福井県",
        19: "山梨県",
        20: "長野県",
        21: "岐阜県",
        22: "静岡県",
        23: "愛知県",
        24: "三重県",
        25: "滋賀県",
        26: "京都府",
        27: "大阪府",
        28: "兵庫県",
        29: "奈良県",
        30: "和歌山県",
        31: "鳥取県",
        32: "島根県",
        33: "岡山県",
        34: "広島県",
        35: "山口県",
        36: "徳島県",
        37: "香川県",
        38: "愛媛県",
        39: "高知県",
        40: "福岡県",
        41: "佐賀県",
        42: "長崎県",
        43: "熊本県",
        44: "大分県",
        45: "宮崎県",
        46: "鹿児島県",
        47: "沖縄県",
        48: "その他",
    }
    # 震源情報
    ep_d = {
        11: "北海道地方",
        12: "東北地方",
        13: "北陸地方",
        14: "関東甲信地方",
        15: "小笠原地方",
        16: "東海地方",
        17: "近畿地方",
        18: "中国地方",
        19: "四国地方",
        20: "九州地方",
        21: "沖縄地方",
        100: "石狩地方北部",
        101: "石狩地方中部",
        102: "石狩地方南部",
        105: "渡島地方北部",
        106: "渡島地方東部",
        107: "渡島地方西部",
        110: "檜山地方",
        115: "後志地方北部",
        116: "後志地方東部",
        117: "後志地方西部",
        120: "空知地方北部",
        121: "空知地方中部",
        122: "空知地方南部",
        125: "上川地方北部",
        126: "上川地方中部",
        127: "上川地方南部",
        130: "留萌地方中北部",
        131: "留萌地方南部",
        135: "宗谷地方北部",
        136: "宗谷地方南部",
        140: "網走地方",
        141: "北見地方",
        142: "紋別地方",
        145: "胆振地方西部",
        146: "胆振地方中東部",
        150: "日高地方西部",
        151: "日高地方中部",
        152: "日高地方東部",
        155: "十勝地方北部",
        156: "十勝地方中部",
        157: "十勝地方南部",
        160: "釧路地方北部",
        161: "釧路地方中南部",
        165: "根室地方北部",
        166: "根室地方中部",
        167: "根室地方南部",
        180: "北海道南西沖",
        181: "北海道西方沖",
        182: "石狩湾",
        183: "北海道北西沖",
        184: "宗谷海峡",
        186: "国後島付近",
        187: "択捉島付近",
        188: "北海道東方沖",
        189: "根室半島南東沖",
        190: "釧路沖",
        191: "十勝沖",
        192: "浦河沖",
        193: "苫小牧沖",
        194: "内浦湾",
        195: "宗谷東方沖",
        196: "網走沖",
        197: "択捉島南東沖",
        200: "青森県津軽北部",
        201: "青森県津軽南部",
        202: "青森県三八上北地方",
        203: "青森県下北地方",
        210: "岩手県沿岸北部",
        211: "岩手県沿岸南部",
        212: "岩手県内陸北部",
        213: "岩手県内陸南部",
        220: "宮城県北部",
        221: "宮城県南部",
        222: "宮城県中部",
        230: "秋田県沿岸北部",
        231: "秋田県沿岸南部",
        232: "秋田県内陸北部",
        233: "秋田県内陸南部",
        240: "山形県庄内地方",
        241: "山形県最上地方",
        242: "山形県村山地方",
        243: "山形県置賜地方",
        250: "福島県中通り",
        251: "福島県浜通り",
        252: "福島県会津",
        280: "津軽海峡",
        281: "山形県沖",
        282: "秋田県沖",
        283: "青森県西方沖",
        284: "陸奥湾",
        285: "青森県東方沖",
        286: "岩手県沖",
        287: "宮城県沖",
        288: "三陸沖",
        289: "福島県沖",
        300: "茨城県北部",
        301: "茨城県南部",
        309: "千葉県南東沖",
        310: "栃木県北部",
        311: "栃木県南部",
        320: "群馬県北部",
        321: "群馬県南部",
        330: "埼玉県北部",
        331: "埼玉県南部",
        332: "埼玉県秩父地方",
        340: "千葉県北東部",
        341: "千葉県北西部",
        342: "千葉県南部",
        349: "房総半島南方沖",
        350: "東京都２３区",
        351: "東京都多摩東部",
        352: "東京都多摩西部",
        360: "神奈川県東部",
        361: "神奈川県西部",
        370: "新潟県上越地方",
        371: "新潟県中越地方",
        372: "新潟県下越地方",
        378: "新潟県下越沖",
        379: "新潟県上中越沖",
        380: "富山県東部",
        381: "富山県西部",
        390: "石川県能登地方",
        391: "石川県加賀地方",
        400: "福井県嶺北",
        401: "福井県嶺南",
        411: "山梨県中・西部",
        412: "山梨県東部・富士五湖",
        420: "長野県北部",
        421: "長野県中部",
        422: "長野県南部",
        430: "岐阜県飛騨地方",
        431: "岐阜県美濃東部",
        432: "岐阜県美濃中西部",
        440: "静岡県伊豆地方",
        441: "静岡県東部",
        442: "静岡県中部",
        443: "静岡県西部",
        450: "愛知県東部",
        451: "愛知県西部",
        460: "三重県北部",
        461: "三重県中部",
        462: "三重県南部",
        469: "三重県南東沖",
        471: "茨城県沖",
        472: "関東東方沖",
        473: "千葉県東方沖",
        475: "八丈島東方沖",
        476: "八丈島近海",
        477: "東京湾",
        478: "相模湾",
        480: "伊豆大島近海",
        481: "伊豆半島東方沖",
        482: "三宅島近海",
        483: "新島・神津島近海",
        485: "駿河湾",
        486: "駿河湾南方沖",
        487: "遠州灘",
        489: "三河湾",
        490: "伊勢湾",
        492: "若狭湾",
        493: "福井県沖",
        494: "石川県西方沖",
        495: "能登半島沖",
        497: "富山湾",
        498: "佐渡付近",
        499: "東海道南方沖",
        500: "滋賀県北部",
        501: "滋賀県南部",
        510: "京都府北部",
        511: "京都府南部",
        520: "大阪府北部",
        521: "大阪府南部",
        530: "兵庫県北部",
        531: "兵庫県南東部",
        532: "兵庫県南西部",
        540: "奈良県",
        550: "和歌山県北部",
        551: "和歌山県南部",
        560: "鳥取県東部",
        562: "鳥取県中部",
        563: "鳥取県西部",
        570: "島根県東部",
        571: "島根県西部",
        580: "岡山県北部",
        581: "岡山県南部",
        590: "広島県北部",
        591: "広島県南東部",
        592: "広島県南西部",
        600: "徳島県北部",
        601: "徳島県南部",
        610: "香川県東部",
        611: "香川県西部",
        620: "愛媛県東予",
        621: "愛媛県中予",
        622: "愛媛県南予",
        630: "高知県東部",
        631: "高知県中部",
        632: "高知県西部",
        673: "土佐湾",
        674: "紀伊水道",
        675: "大阪湾",
        676: "播磨灘",
        677: "瀬戸内海中部",
        678: "安芸灘",
        679: "周防灘",
        680: "伊予灘",
        681: "豊後水道",
        682: "山口県北西沖",
        683: "島根県沖",
        684: "鳥取県沖",
        685: "隠岐島近海",
        686: "兵庫県北方沖",
        687: "京都府沖",
        688: "淡路島付近",
        689: "和歌山県南方沖",
        700: "山口県北部",
        702: "山口県西部",
        703: "山口県東部",
        704: "山口県中部",
        710: "福岡県福岡地方",
        711: "福岡県北九州地方",
        712: "福岡県筑豊地方",
        713: "福岡県筑後地方",
        720: "佐賀県北部",
        721: "佐賀県南部",
        730: "長崎県北部",
        731: "長崎県南西部",
        732: "長崎県島原半島",
        740: "熊本県阿蘇地方",
        741: "熊本県熊本地方",
        742: "熊本県球磨地方",
        743: "熊本県天草・芦北地方",
        750: "大分県北部",
        751: "大分県中部",
        752: "大分県南部",
        753: "大分県西部",
        760: "宮崎県北部平野部",
        761: "宮崎県北部山沿い",
        762: "宮崎県南部平野部",
        763: "宮崎県南部山沿い",
        770: "鹿児島県薩摩地方",
        771: "鹿児島県大隅地方",
        783: "五島列島近海",
        784: "天草灘",
        785: "有明海",
        786: "橘湾",
        787: "鹿児島湾",
        790: "種子島近海",
        791: "日向灘",
        793: "奄美大島近海",
        795: "壱岐・対馬近海",
        796: "福岡県北西沖",
        797: "薩摩半島西方沖",
        798: "トカラ列島近海",
        799: "奄美大島北西沖",
        820: "大隅半島東方沖",
        821: "九州地方南東沖",
        822: "種子島南東沖",
        823: "奄美大島北東沖",
        850: "沖縄本島近海",
        851: "南大東島近海",
        852: "沖縄本島南方沖",
        853: "宮古島近海",
        854: "石垣島近海",
        855: "石垣島南方沖",
        856: "西表島付近",
        857: "与那国島近海",
        858: "沖縄本島北西沖",
        859: "宮古島北西沖",
        860: "石垣島北西沖",
        900: "台湾付近",
        901: "東シナ海",
        902: "四国沖",
        903: "鳥島近海",
        904: "鳥島東方沖",
        905: "オホーツク海南部",
        906: "サハリン西方沖",
        907: "日本海北部",
        908: "日本海中部",
        909: "日本海西部",
        911: "父島近海",
        912: "千島列島",
        913: "千島列島南東沖",
        914: "北海道南東沖",
        915: "東北地方東方沖",
        916: "小笠原諸島西方沖",
        917: "硫黄島近海",
        918: "小笠原諸島東方沖",
        919: "南海道南方沖",
        920: "薩南諸島東方沖",
        921: "本州南方沖",
        922: "サハリン南部付近",
        930: "北西太平洋",
        932: "マリアナ諸島",
        933: "黄海",
        934: "朝鮮半島南部",
        935: "朝鮮半島北部",
        936: "中国東北部",
        937: "ウラジオストク付近",
        938: "シベリア南部",
        939: "サハリン近海",
        940: "アリューシャン列島",
        941: "カムチャツカ半島付近",
        942: "北米西部",
        943: "北米中部",
        944: "北米東部",
        945: "中米",
        946: "南米西部",
        947: "南米中部",
        948: "南米東部",
        949: "北東太平洋",
        950: "南太平洋",
        951: "インドシナ半島付近",
        952: "フィリピン付近",
        953: "インドネシア付近",
        954: "グアム付近",
        955: "ニューギニア付近",
        956: "ニュージーランド付近",
        957: "オーストラリア付近",
        958: "シベリア付近",
        959: "ロシア西部",
        960: "ロシア中部",
        961: "ロシア東部",
        962: "中央アジア",
        963: "中国西部",
        964: "中国中部",
        965: "中国東部",
        966: "インド付近",
        967: "インド洋",
        968: "中東",
        969: "ヨーロッパ西部",
        970: "ヨーロッパ中部",
        971: "ヨーロッパ東部",
        972: "地中海",
        973: "アフリカ西部",
        974: "アフリカ中部",
        975: "アフリカ東部",
        976: "北大西洋",
        977: "南大西洋",
        978: "北極付近",
        979: "南極付近",
        999: "遠地",
        1000: "その他の震央地名",
    }
    latns_d = {0: "北緯", 1: "南緯"}
    lonew_d = {0: "東経", 1: "西経"}
    # 津波
    tsdw_d = {
        0: "",
        1: "津波なし",
        2: "警報解除",
        3: "津波警報",
        4: "大津波警報",
        5: "大津波警報：発表",
        15: "その他警報",
    }
    tshi_d = {
        0: "－",
        1: "０．２ｍ未満",
        2: "１ｍ",
        3: "３ｍ",
        4: "５ｍ",
        5: "１０ｍ",
        6: "１０ｍ超",
        14: "不明",
        15: "その他の津波の高さ",
    }
    tspl_d = {
        0: "余白(演算の都合上日付時刻が表示されていますが無効です)",
        100: "北海道太平洋沿岸東部",
        101: "北海道太平洋沿岸中部",
        102: "北海道太平洋沿岸西部",
        110: "北海道日本海沿岸北部",
        111: "北海道日本海沿岸南部",
        120: "オホーツク海沿岸",
        191: "北海道太平洋沿岸(予約)",
        192: "北海道日本海沿岸(予約)",
        193: "Reserved",
        200: "青森県日本海沿岸",
        201: "青森県太平洋沿岸",
        202: "陸奥湾",
        210: "岩手県",
        220: "宮城県",
        230: "秋田県",
        240: "山形県",
        250: "福島県",
        281: "青森県(予約)",
        291: "東北地方太平洋沿岸(予約)",
        292: "東北地方日本海沿岸(予約)",
        300: "茨城県",
        310: "千葉県九十九里・外房",
        311: "千葉県内房",
        312: "東京湾内湾",
        320: "伊豆諸島",
        321: "小笠原諸島",
        330: "相模湾・三浦半島",
        340: "新潟県上中下越",
        341: "佐渡",
        350: "富山県",
        360: "石川県能登",
        361: "石川県加賀",
        370: "福井県",
        380: "静岡県",
        390: "愛知県外海",
        391: "伊勢・三河湾",
        400: "三重県南部",
        481: "千葉県(予約)",
        482: "神奈川県(予約)",
        483: "新潟県(予約)",
        484: "石川県(予約)",
        485: "愛知県(予約)",
        486: "三重県(予約)",
        491: "関東地方(予約)",
        492: "伊豆・小笠原諸島(予約)",
        493: "北陸地方(予約)",
        494: "東海地方(予約)",
        500: "京都府",
        510: "大阪府",
        520: "兵庫県北部",
        521: "兵庫県瀬戸内海沿岸",
        522: "淡路島南部",
        530: "和歌山県",
        540: "鳥取県",
        550: "島根県出雲・石見",
        551: "隠岐",
        560: "岡山県",
        570: "広島県",
        580: "徳島県",
        590: "香川県",
        600: "愛媛県宇和海沿岸",
        601: "愛媛県瀬戸内海沿岸",
        610: "高知県",
        681: "兵庫県(予約)",
        682: "島根県(予約)",
        683: "愛媛県(予約)",
        691: "近畿四国太平洋沿岸(予約)",
        692: "近畿中国日本海沿岸(予約)",
        693: "瀬戸内海沿岸(予約)",
        700: "山口県日本海沿岸",
        701: "山口県瀬戸内海沿岸",
        710: "福岡県瀬戸内海沿岸",
        711: "福岡県日本海沿岸",
        712: "有明・八代海",
        720: "佐賀県北部",
        730: "長崎県西方",
        731: "壱岐・対馬",
        740: "熊本県天草灘沿岸",
        750: "大分県瀬戸内海沿岸",
        751: "大分県豊後水道沿岸",
        760: "宮崎県",
        770: "鹿児島県東部",
        771: "種子島・屋久島地方",
        772: "奄美群島・トカラ列島",
        773: "鹿児島県西部",
        781: "山口県(予約)",
        782: "福岡県(予約)",
        783: "佐賀県(予約)",
        784: "長崎県(予約)",
        785: "熊本県(予約)",
        786: "大分県(予約)",
        787: "鹿児島県(予約)",
        791: "九州地方東部(予約)",
        792: "九州地方西部(予約)",
        793: "薩南諸島(予約)",
        800: "沖縄本島地方",
        801: "大東島地方",
        802: "宮古島・八重山地方",
        891: "沖縄県地方(予約)",
        990: "Reserved",
        1000: "その他の津波予報区",
    }
    # 北西太平洋津波
    ntt = {
        0: "THERE IS NO POSSIBILITY OF A TSUNAMI",
        1: " THERE IS A POSSIBILITY OF A DESTRUCTIVE OCEAN-WIDE TSUNAMI",
        2: " THERE IS A POSSIBILITY OF A DESTRUCTIVE REGIONAL TSUNAMI",
        3: " THERE IS A POSSIBILITY OF A DESTRUCTIVE LOCAL TSUNAMI NEAR THE EPICENTER",
        4: " THERE IS A VERY SMALL POSSIBILITY OF A DESTRUCTIVE LOCAL TSUNAMI",
    }
    nth = {
        0: "",
        1: "０．３ｍ～１ｍ",
        2: "１ｍ～３ｍ",
        3: "３ｍ～５ｍ",
        4: "",
        508: "１０ｍ超",
        509: "巨大",
        510: "高い",
        511: "不明",
    }
    ncr = {
        1: "Ust-Kamchatsk (East Coasts of Kamchatka Peninsula)",
        2: "Petropavlovsk-K (East Coasts of Kamchatka Peninsula)",
        3: "Severo Kurilsk (Kuril Islands)",
        4: "Urup Islands (Kuril Islands)",
        5: "Busan (South Coasts of Korean Peninsula)",
        6: "Nohwa (South Coasts of Korean Peninsula)",
        7: "Seogwipo (South Coasts of Korean Peninsula)",
        8: "Hualien (Taiwan)",
        9: "Basco (East Coasts of Philippines)",
        10: "Palanan (East Coasts of Philippines)",
        11: "Legaspi (East Coasts of Philippines)",
        12: "Laoang (East Coasts of Philippines)",
        13: "Madrid (East Coasts of Philippines)",
        14: "Davao (East Coasts of Philippines)",
        15: "Berebere (North Coasts of Irian Jaya)",
        16: "Patani (North Coasts of Irian Jaya)",
        17: "Sorong (North Coasts of Irian Jaya)",
        18: "Manokwari (North Coasts of Irian Jaya)",
        19: "Warsa (North Coasts of Irian Jaya)",
        20: "Jayapura (North Coasts of Irian Jaya)",
        21: "Vanimo (North Coasts of Papua New Guinea)",
        22: "Wewak (North Coasts of Papua New Guinea)",
        23: "Madang (North Coasts of Papua New Guinea)",
        24: "Manus Islands (North Coasts of Papua New Guinea)",
        25: "Rabaul (North Coasts of Papua New Guinea)",
        26: "Kavieng (North Coasts of Papua New Guinea)",
        27: "Kimbe (North Coasts of Papua New Guinea)",
        28: "Kieta (North Coasts of Papua New Guinea)",
        29: "Guam (Mariana Islands)",
        30: "Saipan (Mariana Islands)",
        31: "Malakal (Palau)",
        32: "Yap Island (Micronesia)",
        33: "Chuuk Island (Micronesia)",
        34: "Pohnpei Island (Micronesia) ",
        35: "Kosrae Island (Micronesia) ",
        36: "Eniwetok Island (Marshall Islands) ",
        37: "Panggoe (North Coasts of Solomon Islands) ",
        38: "Auki (North Coasts of Solomon Islands) ",
        39: "Kirakira (North Coasts of Solomon Islands) ",
        40: "Munda (Solomon Sea) ",
        41: "Honiara (Solomon Sea) ",
        42: " Reserved ",
        43: " Reserved ",
        44: " Reserved ",
        45: " Reserved ",
        46: " Reserved ",
        47: " Reserved ",
        48: " Reserved ",
        49: " Reserved ",
        50: " Reserved ",
        51: " Reserved ",
        52: " Reserved ",
        53: " Reserved ",
        54: " Reserved ",
        55: " Reserved ",
        56: " Reserved ",
        57: " Reserved ",
        58: " Reserved ",
        59: " Reserved ",
        60: " Reserved ",
        61: " Reserved ",
        62: " Reserved ",
        63: " Reserved ",
        64: " Reserved ",
        65: " Reserved ",
        66: "Ostrov-Karaginskiy (East Coasts of Kamchatka Peninsula) ",
        67: "Nikolskoya (East Coasts of Kamchatka Peninsula) ",
        68: "Tongyeong (South Coasts of Korean Peninsula) ",
        69: "Heuksando (South Coasts of Korean Peninsula) ",
        70: "Cheju-Island (South Coasts of Korean Peninsula) ",
        71: "Chilung (Taiwan) ",
        72: "Taitung (Taiwan) ",
        73: "Reserved ",
        74: "Homel (Taiwan) ",
        75: "Geme (North Coasts of Irian Jaya) ",
        76: "Ulamona (North Coasts of Papua New Guinea) ",
        77: "Ghatere (North Coasts of Solomon Islands) ",
        78: "Amun (Solomon Sea) ",
        79: "Falamae (Solomon Sea) ",
        80: "Misima (Solomon Sea) ",
        81: "Alotau (Solomon Sea) ",
        82: "Lae (Solomon Sea) ",
        83: "Port-Moresby (Coral Sea) ",
        84: "Shanghai (Coasts of East China Sea) ",
        85: "Zhoushan (Coasts of East China Sea) ",
        86: "Wenzhou (Coasts of East China Sea) ",
        87: "Reserved ",
        88: "Reserved ",
        89: "Reserved ",
        90: "Reserved ",
        91: "Reserved ",
        92: "Reserved ",
        93: "Reserved ",
        94: "Reserved ",
        95: "Reserved ",
        96: "Reserved ",
        99: "Unknown ",
        100: "Other region ",
    }
    # 南海トラフ地震
    infos_d = {
        1: "調査中A",
        2: "調査中B",
        3: "調査中C",
        4: "巨大地震警戒",
        5: "巨大地震注意",
        6: "調査終了",
        15: "その他",
    }
    # 火山情報
    vodw_d = {
        0: " ",
        1: "予約",
        2: "予約",
        3: "予約",
        4: "予約",
        5: "予約",
        11: "レベル１(活火山であることに留意)",
        12: "レベル２(火口周辺規制)",
        13: "レベル３(入山規制)",
        14: "レベル４(高齢者等避難)",
        15: "レベル５(避難)",
        21: "活火山であることに留意",
        22: "火口周辺危険",
        23: "入山危険",
        24: "山麓厳重警戒",
        25: "居住地域厳重警戒",
        31: "予約",
        33: "予約",
        35: "活火山であることに留意(海底火山)",
        36: "周辺海域警戒",
        41: "予約",
        49: "予約",
        50: "噴火",
        62: "噴火したもよう",
        127: "その他の防災気象情報要素",
    }
    # 降灰
    awc = ts_d = {
        0: "",
        1: "少量の降灰",
        2: "やや多量の降灰",
        4: "小さな噴石の落下",
        7: "その他の防災気象情報要素２",
    }
    # 気象(Wether)
    ww_d = {
        0: "余白",
        1: "暴風雪特別警報",
        2: "大雨特別警報",
        3: "暴風特別警報",
        4: "大雪特別警報",
        5: "波浪特別警報",
        6: "高潮特別警報",
        7: "全ての気象特別警報",
        21: "記録的短時間大雨情報",
        22: "竜巻注意情報",
        23: "土砂災害警戒情報",
        31: "その他の警報等情報要素",
    }
    wwpl_d = {
        0: "余白",
        11000: "宗谷地方",
        12000: "上川・留萌地方",
        12010: "上川地方",
        12020: "留萌地方",
        13000: "網走・北見・紋別地方",
        14010: "根室地方",
        14020: "釧路地方",
        14030: "十勝地方",
        14100: "釧路・根室地方",
        15000: "胆振・日高地方",
        15010: "胆振地方",
        15020: "日高地方",
        16000: "石狩・空知・後志地方",
        16010: "石狩地方",
        16020: "空知地方",
        16030: "後志地方",
        16100: "石狩・空知地方",
        17000: "渡島・檜山地方",
        17010: "渡島地方",
        17020: "檜山地方",
        20000: "青森県",
        30000: "岩手県",
        40000: "宮城県",
        50000: "秋田県",
        60000: "山形県",
        70000: "福島県",
        80000: "茨城県",
        90000: "栃木県",
        100000: "群馬県",
        110000: "埼玉県",
        120000: "千葉県",
        130000: "東京都",
        130010: "東京地方",
        130020: "伊豆諸島北部",
        130030: "伊豆諸島南部",
        140000: "神奈川県",
        150000: "新潟県",
        160000: "富山県",
        170000: "石川県",
        180000: "福井県",
        190000: "山梨県",
        200000: "長野県",
        210000: "岐阜県",
        220000: "静岡県",
        230000: "愛知県",
        240000: "三重県",
        250000: "滋賀県",
        260000: "京都府",
        270000: "大阪府",
        280000: "兵庫県",
        290000: "奈良県",
        300000: "和歌山県",
        310000: "鳥取県",
        320000: "島根県",
        330000: "岡山県",
        340000: "広島県",
        350000: "山口県",
        360000: "徳島県",
        370000: "香川県",
        380000: "愛媛県",
        390000: "高知県",
        400000: "福岡県",
        410000: "佐賀県",
        420000: "長崎県",
        430000: "熊本県",
        440000: "大分県",
        450000: "宮崎県",
        460000: "鹿児島県",
        460040: "奄美地方",
        460100: "鹿児島県(奄美地方除く)",
        471000: "沖縄本島地方",
        472000: "大東島地方",
        473000: "宮古島地方",
        474000: "八重山地方",
        500000: "その他の府県予報区",
    }
    # 洪水(Flood)
    fl_d = {
        1: "警報解除",
        2: "氾濫警戒情報",
        3: "氾濫危険情報",
        4: "氾濫発生情報",
        15: "その他の警戒レベル",
    }
    ffr_d = {
        10175000100: "新川(北海道道央)",
        19999999999: "北海道のその他の河川",
        20036000100: "堤川・駒込川(青森県)",
        29999999999: "青森県のその他の河川",
        39999999999: "岩手県のその他の河川",
        40028000100: "七北田川(宮城県)",
        49999999999: "宮城県のその他の河川",
        59999999999: "秋田県のその他の河川",
        60016000100: "日向川(山形県)",
        69999999999: "山形県のその他の河川",
        70006000100: "宇多川(福島県)",
        70010000100: "新田川(福島県)",
        70028000100: "夏井川(福島県)",
        79999999999: "福島県のその他の河川",
        89999999999: "茨城県のその他の河川",
        99999999999: "栃木県のその他の河川",
        109999999999: "群馬県のその他の河川",
        119999999999: "埼玉県のその他の河川",
        129999999999: "千葉県のその他の河川",
        130005000100: "目黒川(東京都)",
        130006000100: "渋谷川・古川(東京都)",
        139999999999: "東京都のその他の河川",
        140019000100: "酒匂川(神奈川県)",
        149999999999: "神奈川県のその他の河川",
        159999999999: "新潟県のその他の河川",
        169999999999: "富山県のその他の河川",
        179999999999: "石川県のその他の河川",
        180006000100: "南川(福井県)",
        180014000100: "笙の川(福井県)",
        189999999999: "福井県のその他の河川",
        199999999999: "山梨県のその他の河川",
        209999999999: "長野県のその他の河川",
        219999999999: "岐阜県のその他の河川",
        220062000100: "瀬戸川・朝比奈川(静岡県)",
        220079000100: "太田川・原野谷川(静岡県)",
        220081000100: "都田川(静岡県)",
        229999999999: "静岡県のその他の河川",
        230029000100: "境川・逢妻川(愛知県)",
        230052000100: "天白川(愛知県)",
        230054000100: "日光川(愛知県)",
        239999999999: "愛知県のその他の河川",
        249999999999: "三重県のその他の河川",
        259999999999: "滋賀県のその他の河川",
        269999999999: "京都府のその他の河川",
        270013000100: "大津川・槇尾川(大阪府)",
        270013000200: "牛滝川(大阪府)",
        279999999999: "大阪府のその他の河川",
        280014000100: "武庫川(兵庫県)",
        280053000100: "市川(兵庫県)",
        280064000100: "千種川(兵庫県)",
        289999999999: "兵庫県のその他の河川",
        299999999999: "奈良県のその他の河川",
        300013000100: "古座川(和歌山県)",
        300066000100: "日高川(和歌山県)",
        300077000100: "有田川(和歌山県)",
        309999999999: "和歌山県のその他の河川",
        310027000100: "由良川(鳥取県)",
        319999999999: "鳥取県のその他の河川",
        320004000100: "益田川(島根県)",
        320011000100: "周布川(島根県)",
        329999999999: "島根県のその他の河川",
        330009000100: "笹ヶ瀬川・足守川(岡山県)",
        339999999999: "岡山県のその他の河川",
        340013000100: "沼田川(広島県)",
        340021000100: "黒瀬川(広島県)",
        349999999999: "広島県のその他の河川",
        350002000102: "錦川下流部(山口県)",
        350002000103: "錦川中流部(山口県)",
        350019000100: "島田川(山口県)",
        350036000100: "椹野川(山口県)",
        350036001900: "仁保川(山口県)",
        350046000100: "厚東川(山口県)",
        359999999999: "山口県のその他の河川",
        360007000100: "勝浦川(徳島県)",
        369999999999: "徳島県のその他の河川",
        370026000100: "香東川(香川県)",
        379999999999: "香川県のその他の河川",
        389999999999: "愛媛県のその他の河川",
        399999999999: "高知県のその他の河川",
        400018000100: "御笠川(福岡県)",
        409999999999: "福岡県のその他の河川",
        419999999999: "佐賀県のその他の河川",
        429999999999: "長崎県のその他の河川",
        439999999999: "熊本県のその他の河川",
        440008000100: "駅館川(大分県)",
        449999999999: "大分県のその他の河川",
        450026000100: "清武川(宮崎県)",
        450040000100: "広渡川(宮崎県)",
        450040000700: "酒谷川(宮崎県)",
        459999999999: "宮崎県のその他の河川",
        460060000100: "万之瀬川・加世田川(鹿児島県)",
        469999999999: "鹿児島県のその他の河川",
        479999999999: "沖縄県のその他の河川",
        809999999999: "沖縄県のその他の河川",
        810101000100: "天塩川(北海道道北)",
        810101008500: "名寄川(北海道道北)",
        810102000100: "留萌川(北海道道北)",
        810103000101: "石狩川上流(北海道道北)",
        810103000102: "石狩川下流(北海道道央)",
        810103003100: "豊平川(北海道道央)",
        810103008100: "千歳川(北海道道央)",
        810103011900: "夕張川(北海道道央)",
        810103018200: "幾春別川(北海道道央)",
        810103025001: "空知川上流(北海道道北)",
        810103025002: "空知川下流(北海道道央)",
        810103033400: "雨竜川(北海道道央)",
        810103040900: "忠別川(北海道道北)",
        810103041000: "美瑛川(北海道道北)",
        810103044200: "牛朱別川(北海道道北)",
        810104000100: "尻別川(北海道道央)",
        810105000100: "後志利別川(北海道道南)",
        810106000100: "鵡川(北海道道南)",
        810107000100: "沙流川(北海道道南)",
        810108000100: "十勝川(北海道道東)",
        810108003400: "利別川(北海道道東)",
        810108011400: "札内川(北海道道東)",
        810108013900: "音更川(北海道道東)",
        810109000100: "釧路川・新釧路川(北海道道東)",
        810110000100: "網走川(北海道道東)",
        810110001000: "美幌川(北海道道東)",
        810111000100: "常呂川(北海道道東)",
        810111002400: "無加川(北海道道東)",
        810112000100: "湧別川(北海道道東)",
        810113000100: "渚滑川(北海道道東)",
        819999999999: "北海道のその他の河川",
        820201000101: "阿武隈川上流(福島県・宮城県)",
        820201000102: "阿武隈川下流(宮城県)",
        820201000400: "白石川(宮城県)",
        820201009900: "荒川(福島県)",
        820202000100: "名取川(宮城県)",
        820202001100: "広瀬川(宮城県)",
        820203000100: "鳴瀬川(宮城県)",
        820203000400: "吉田川(宮城県)",
        820204000101: "北上川上流(岩手県)",
        820204000102: "北上川下流(宮城県)",
        820204001800: "旧北上川(宮城県)",
        820204001900: "迫川(宮城県)",
        820204007100: "江合川(宮城県)",
        820204035600: "猿ヶ石川(岩手県)",
        820204048200: "雫石川(岩手県)",
        820205000102: "馬淵川下流(青森県)",
        820205000103: "馬淵川中流(青森県)",
        820206000100: "高瀬川(小川原湖)(青森県)",
        820207000100: "岩木川(青森県)",
        820207003500: "十川(青森県)",
        820207006101: "平川上流(青森県)",
        820207006102: "平川下流(青森県)",
        820208000100: "米代川(秋田県)",
        820209000101: "雄物川上流(秋田県)",
        820209000102: "雄物川下流(秋田県)",
        820209000400: "太平川(秋田県)",
        820209005500: "玉川(秋田県)",
        820209018700: "皆瀬川(秋田県)",
        820210000100: "子吉川(秋田県)",
        820211000101: "最上川上流(山形県)",
        820211000102: "最上川下流(山形県)",
        820211000103: "最上川中流(山形県)",
        820211007300: "鮭川(山形県)",
        820211017000: "最上小国川(山形県)",
        820211022100: "丹生川(山形県)",
        820211030701: "須川上流(山形県)",
        820211030702: "須川下流(山形県)",
        820211048700: "屋代川(山形県)",
        820212000100: "赤川(山形県)",
        820212000200: "大山川(山形県)",
        829999999999: "東北地方のその他の河川",
        830301000100: "久慈川(茨城県)",
        830302000100: "那珂川(栃木県・茨城県)",
        830302000101: "那珂川上流部(栃木県)",
        830302008300: "逆川(栃木県)",
        830302009400: "荒川(栃木県)",
        830302014300: "箒川(栃木県)",
        830302014700: "蛇尾川(栃木県)",
        830302018300: "余笹川(栃木県)",
        830303000101: "利根川上流部(群馬県・茨城県・千葉利根川上流部県・埼玉県)",
        830303000102: "利根川下流部(茨城県・千葉県)",
        830303000103: "利根川中流部(茨城県・千葉県)",
        830303002800: "霞ヶ浦・北浦(茨城県・千葉県)",
        830303004600: "桜川(茨城県)",
        830303015200: "小貝川(栃木県・茨城県)",
        830303015201: "小貝川上流部(栃木県)",
        830303017900: "五行川(栃木県)",
        830303020300: "鬼怒川(栃木県・茨城県)",
        830303021100: "田川(栃木県)",
        830303030400: "江戸川(茨城県・埼玉県・東京都・千江戸川葉県)",
        830303033900: "中川(埼玉県・東京都)",
        830303043600: "綾瀬川(谷古宇区間)(埼玉県・東京都)",
        830303043603: "綾瀬川中流部(一の橋区間)(埼玉県)",
        830303046101: "渡良瀬川上流部(群馬県・栃木県)",
        830303046102: "渡良瀬川下流部(栃木県・茨城県・群渡良瀬川下流部馬県)",
        830303049400: "黒川(栃木県)",
        830303051700: "永野川(栃木県)",
        830303053000: "秋山川(栃木県)",
        830303054800: "袋川(栃木県)",
        830303060000: "石田川(群馬県・埼玉県)",
        830303068900: "烏川流域(群馬県・埼玉県)",
        830303069600: "神流川(群馬県・埼玉県)",
        830304000100: "荒川(埼玉県・東京都)",
        830304000300: "芝川・新芝川(埼玉県・東京都)",
        830304001200: "新河岸川(埼玉県)",
        830304003200: "石神井川(東京都)",
        830304004400: "神田川(東京都)",
        830304004700: "妙正寺川(東京都)",
        830304007000: "越辺川・都幾川・高麗川(埼玉県)",
        830304007100: "入間川・小畔川(埼玉県)",
        830305000100: "多摩川(東京都・神奈川県)",
        830305000500: "野川・仙川(東京都)",
        830305002000: "浅川(東京都)",
        830306000100: "鶴見川(神奈川県)",
        830307000102: "相模川下流(神奈川県)",
        830305002000: "浅川(東京都)",
        830307000103: "相模川中流(神奈川県)",
        830308000100: "富士川(釜無川を含む)(山梨県・静岡県)",
        830308039500: "笛吹川(山梨県)",
        830308045500: "荒川(山梨県)",
        830308065700: "塩川(山梨県)",
        839999999999: "関東地方のその他の河川",
        840401000100: "荒川(新潟県)",
        840402000100: "阿賀野川(新潟県)",
        840402000101: "阿賀川(福島県)",
        840403000100: "千曲川(長野県)",
        840403000101: "千曲川上流(長野県)",
        840403000102: "信濃川下流・中ノ口川(新潟県)",
        840403000103: "信濃川中流(新潟県)",
        840403000104: "信濃川水系千曲川下流(長野県)",
        840403000105: "信濃川上流(新潟県)",
        840403023700: "魚野川(新潟県)",
        840403070500: "犀川(長野県)",
        840403070600: "裾花川(長野県)",
        840403089800: "奈良井川(長野県)",
        840404000100: "関川(新潟県)",
        840405000100: "姫川(新潟県)",
        840406000100: "黒部川(富山県)",
        840407000100: "常願寺川(富山県)",
        840408000101: "宮川(岐阜県)",
        840408000102: "神通川(富山県)",
        840409000100: "庄川(富山県)",
        840410000100: "小矢部川(富山県)",
        840411000100: "手取川(石川県)",
        840412000100: "梯川(石川県)",
        849999999999: "北陸地方のその他の河川",
        850501000100: "狩野川(静岡県)",
        850502000100: "安倍川(静岡県)",
        850503000100: "大井川(静岡県)",
        850504000100: "菊川(静岡県)",
        850505000101: "天竜川上流(長野県)",
        850505000102: "天竜川下流(静岡県)",
        850505071753: "諏訪湖(長野県)",
        850506000100: "豊川及び豊川放水路(愛知県)",
        850507000100: "矢作川(愛知県)",
        850508000100: "庄内川(岐阜県・愛知県)",
        850508000200: "新川(愛知県)",
        850509000102: "木曽川下流(愛知県・岐阜県・三重県)",
        850509000103: "木曽川中流(岐阜県・愛知県)",
        850509000202: "揖斐川下流(岐阜県・三重県)",
        850509000203: "揖斐川中流(岐阜県)",
        850509000401: "長良川上流(岐阜県)",
        850509000402: "長良川下流(岐阜県・愛知県・三重県)",
        850509000403: "長良川中流(岐阜県)",
        850509025500: "飛騨川(岐阜県)",
        850510000100: "鈴鹿川及び鈴鹿川派川(三重県)",
        850511000100: "雲出川及び雲出古川(三重県)",
        850512000100: "櫛田川(三重県)",
        850513000100: "宮川(三重県)",
        859999999999: "中部地方のその他の河川",
        860601000102: "熊野川下流(三重県・和歌山県)",
        860601000103: "熊野川中流(本宮区間)(和歌山県)",
        860601000105: "熊野川中流(日足区間)(和歌山県)",
        860602000100: "紀の川(奈良県・和歌山県)",
        860603000101: "大和川上流(奈良県・大阪府)",
        860603000102: "大和川下流(奈良県・大阪府)",
        860603001300: "石川(大阪府)",
        860604000101: "瀬田川(滋賀県)",
        860604000102: "淀川(京都府・大阪府)",
        860604000103: "宇治川(京都府・大阪府)",
        860604000600: "寝屋川流域(大阪府)",
        860604004700: "神崎川・安威川(大阪府)",
        860604007300: "猪名川(大阪府・兵庫県)",
        860604016702: "桂川下流(京都府・大阪府)",
        860604016703: "桂川中流・園部川(京都府)",
        860604018200: "鴨川・高野川(京都府)",
        860604037101: "木津川上流(三重県・京都府)",
        860604037102: "木津川下流(京都府)",
        860604051600: "名張川(三重県・奈良県)",
        860604086300: "琵琶湖(滋賀県)",
        860604101200: "姉川(滋賀県)",
        860604101300: "高時川(滋賀県)",
        860604120300: "日野川(滋賀県)",
        860604127501: "野洲川上流(滋賀県)",
        860604127502: "野洲川下流(滋賀県)",
        860604131100: "杣川(滋賀県)",
        860605000101: "加古川上流(兵庫県)",
        860605000102: "加古川下流(兵庫県)",
        860606000101: "揖保川上流(兵庫県)",
        860606000102: "揖保川下流(兵庫県)",
        860607000100: "九頭竜川(福井県)",
        860607000200: "竹田川(福井県)",
        860607001902: "日野川下流(福井県)",
        860607001903: "日野川中流(福井県)",
        860607002200: "足羽川(福井県)",
        860608000100: "北川(福井県)",
        860609000102: "由良川下流(京都府)",
        860609000103: "由良川中流(京都府)",
        860610000100: "円山川(兵庫県)",
        860610002600: "出石川(兵庫県)",
        869999999999: "近畿地方のその他の河川",
        870701000100: "千代川(鳥取県)",
        870701000900: "袋川・新袋川(鳥取県)",
        870702000100: "天神川(鳥取県)",
        870702000300: "小鴨川(鳥取県)",
        870702000400: "国府川(鳥取県)",
        870703000100: "日野川(鳥取県)",
        870703000300: "法勝寺川(鳥取県)",
        870704000100: "斐伊川(島根県)",
        870704002800: "飯梨川(島根県)",
        870704024400: "神戸川(島根県)",
        870705000101: "江の川上流(広島県・島根県)",
        870705000102: "江の川下流(広島県・島根県)",
        870705015700: "神野瀬川(広島県)",
        870705016300: "馬洗川(広島県)",
        870705016400: "西城川(広島県)",
        870706000100: "高津川(島根県)",
        870706001700: "匹見川(島根県)",
        870707000100: "佐波川(山口県)",
        870708000100: "小瀬川(広島県・山口県)",
        870709000101: "太田川上流(広島県)",
        870709000102: "太田川下流(広島県)",
        870709002900: "三篠川(広島県)",
        870709004700: "根谷川(広島県)",
        870710000100: "芦田川(広島県)",
        870710001100: "高屋川(広島県)",
        870711000100: "高梁川(岡山県)",
        870711000500: "小田川(岡山県)",
        870712000100: "旭川(岡山県)",
        870712000103: "旭川水系旭川中流部(岡山県)",
        870712000400: "百間川(岡山県)",
        870713000100: "吉井川(岡山県)",
        870713002800: "金剛川(岡山県)",
        879999999999: "中国地方のその他の河川",
        880801000100: "重信川(愛媛県)",
        880802000100: "肱川(愛媛県)",
        880803000100: "四万十川(高知県)",
        880804000100: "仁淀川(高知県)",
        880805000100: "物部川(高知県)",
        880806000100: "那賀川(徳島県)",
        880807000100: "吉野川(徳島県)",
        880808000100: "土器川(香川県)",
        889999999999: "四国地方のその他の河川",
        890901000101: "遠賀川上流部(福岡県)",
        890901000102: "遠賀川下流部(福岡県)",
        890901010300: "彦山川(福岡県)",
        890902000100: "松浦川(佐賀県)",
        890902001300: "徳須恵川(佐賀県)",
        890902004900: "厳木川(佐賀県)",
        890903000100: "本明川(長崎県)",
        890904000100: "六角川(佐賀県)",
        890904000300: "牛津川(佐賀県)",
        890905000100: "嘉瀬川(佐賀県)",
        890906000102: "筑後川下流部(福岡県・佐賀県)",
        890906000104: "筑後川上中流部(大分県・福岡県)",
        890907000100: "矢部川(福岡県)",
        890908000100: "菊池川水系(熊本県)",
        890909000100: "白川(熊本県)",
        890910000100: "緑川水系(熊本県)",
        890911000100: "球磨川(熊本県)",
        890912000101: "川内川上流部(宮崎県・鹿児島県)",
        890912000102: "川内川下流部(鹿児島県)",
        890913000100: "肝属川水系(鹿児島県)",
        890914000101: "大淀川上流部(宮崎県)",
        890914000102: "大淀川下流部(宮崎県)",
        890914003300: "本庄川(宮崎県)",
        890915000100: "小丸川(宮崎県)",
        890916000100: "五ヶ瀬川・大瀬川(宮崎県)",
        890917000100: "番匠川(大分県)",
        890918000100: "大野川水系(大分県)",
        890919000100: "大分川(大分県)",
        890919001100: "七瀬川(大分県)",
        890920000101: "山国川上流部(大分県・福岡県)",
        890920000102: "山国川下流部(大分県・福岡県)",
        899999999999: "九州地方のその他の河川",
    }
    # 台風
    ts_d = {0: "なし", 1: "大型", 2: "超大型", 15: "その他大きさ階級分類"}
    ti_d = {
        0: "なし",
        1: "強い",
        2: "非常に強い",
        3: "猛烈な",
        15: "その他強さ階級分類",
    }
    dt_d = {1: "実況", 2: "推定", 3: "予報"}

    # 海上気象予報
    mpl_d = {
        0: "(余白)",
        1000: "日本海北部及びオホーツク海南部",
        1010: "サハリン東方海上",
        1020: "サハリン西方海上",
        1030: "網走沖",
        1040: "宗谷海峡",
        1050: "北海道西方海上",
        1100: "北海道南方及び東方海上",
        1110: "北海道東方海上",
        1120: "釧路沖",
        1130: "日高沖",
        1140: "津軽海峡",
        1150: "檜山津軽沖",
        2000: "三陸沖",
        2010: "三陸沖東部",
        2020: "三陸沖西部",
        3000: "関東海域",
        3010: "関東海域北部",
        3020: "関東海域南部",
        3100: "日本海中部",
        3110: "沿海州南部沖",
        3120: "秋田沖",
        3130: "佐渡沖",
        3140: "能登沖",
        3200: "東海海域",
        3210: "東海海域東部",
        3220: "東海海域西部",
        3230: "東海海域南部",
        4000: "四国沖及び瀬戸内海",
        4010: "瀬戸内海",
        4020: "四国沖北部",
        4030: "四国沖南部",
        4100: "日本海西部",
        4110: "日本海北西部",
        4120: "山陰沖東部及び若狭湾付近",
        4130: "山陰沖西部",
        5000: "対馬海峡",
        5100: "九州西方海上",
        5110: "済州島西海上",
        5120: "長崎西海上",
        5130: "女島南西海上",
        5200: "九州南方海上及び日向灘",
        5210: "日向灘",
        5220: "鹿児島海域",
        5230: "奄美海域",
        6000: "沖縄海域",
        6010: "東シナ海南部",
        6020: "沖縄東方海上",
        6030: "沖縄南方海上",
        10000: "その他の地方海上予報区",
    }
    mdw_d = {
        0: "発表なし",
        10: "海上着氷警報",
        11: "海上濃霧警報",
        12: "海上うねり警報",
        20: "海上風警報",
        21: "海上強風警報",
        22: "海上暴風警報",
        23: "海上台風警報",
        31: "その他の警報等情報要素_海上警報",
    }

    # 災害種別コードごとの抽出部
    rc = int(bin_msg[15:18], 2)  # 通報区分(優先度　１：最優先　２：優先　３：通常　４～６：未定義　７：訓練)
    dc = int(bin_msg[18:22], 2)  # １～６，８～１２，１４の１２種類で緊急地震速報は「１」(７と１３は未定義の予約領域)
    if dc == 1:  # 緊急地震速報 ☆完成☆ 整形/ファイル出力あり
        atmo = int(bin_msg[22:26], 2)
        atd = int(bin_msg[26:31], 2)
        # データーはUTC時間で配信されるため、表記は＋９時間してJTCにする
        ath = int(bin_msg[31:36], 2) + utctimeshift
        atmi = int(bin_msg[36:42], 2)
        it = int(bin_msg[42:44], 2)
        spare1 = int(bin_msg[44:54], 2)
        co1 = int(bin_msg[54:63], 2)
        co2 = int(bin_msg[63:72], 2)
        co3 = int(bin_msg[72:81], 2)
        otd1 = int(bin_msg[81:86], 2)
        # データーはUTC時間で配信されるため、表記は＋９時間してJTCにする
        oth1 = int(bin_msg[86:91], 2) + utctimeshift
        otm1 = int(bin_msg[91:97], 2)
        de = int(bin_msg[97:106], 2)
        ma = int(bin_msg[106:113], 2) / 10
        ep = int(bin_msg[113:123], 2)
        ul = int(bin_msg[123:127], 2)
        ll = int(bin_msg[127:131], 2)
        pl = bin_msg[131:211]
        spare2 = int(bin_msg[211:215], 2)
        vn = int(bin_msg[215:221], 2)
        reserved = int(bin_msg[221:227], 2)
        crc = int(bin_msg[227:252], 2)

        plbin = pl.zfill(80)  # 数値を0埋めしてビットを合わせる
        plkey = [x.start() for x in re.finditer("1", str(plbin))]
        pllist = {key: pleew_d[key] for key in plkey}
        pllist_out = [list(pllist.values())]

        if eew_prefset == "none":
            prefchk = False

        if eew_prefset == "all":
            prefchk = True

        else:
            prefchk = eew_prefset in pllist_out[0]

        # print(*pllist_out[0])
        outputtext = (co_d[co1], co_d[co2], co_d[co3], otd1, "日", oth1, "時", otm1, "分発生", "震源地：", ep_d[ep], "マグニチュード：", ma, "震源の深さ：", de, "km", "最低震度：", ul_d[ul], "最大震度：", ll_d[ll], atmo, "月", atd, "日", ath, "時", atmi, "分配信")

        """
        hwith open('A:\\Users\\maima\\OneDrive\\QZSS受信機計画\\サンプル\\QZSS_Reciver_Web\\text\\eew.txt', 'w',encoding="UTF-8") as f:
        """
        textdata = (
            pab_d[pab],
            mt_d[mt],
            "(",
            rc_d[rc],
            ")",
            dc_d[dc],
            it_d[it],
            "(第",
            vn,
            "報)",
            atmo,
            "月",
            atd,
            "日",
            ath,
            "時",
            atmi,
            "分配信",
            co_d[co1],
            co_d[co2],
            co_d[co3],
            "対象地域",
            *pllist_out[0],
            otd1,
            "日",
            oth1,
            "時",
            otm1,
            "分発生",
            "震源地：",
            ep_d[ep],
            "マグニチュード：",
            ma,
            "震源の深さ：",
            de,
            "km",
            "最低震度：",
            ul_d[ul],
            "最大震度：",
            ll_d[ll],
            atd,
            "日",
            ath,
            "時",
            atmi,
            "分発表",
        )
        outputdata = [
            pab,
            mt,
            rc,
            dc,
            atmo,
            atd,
            ath,
            atmi,
            it,
            spare1,
            co1,
            co2,
            co3,
            otd1,
            oth1,
            otm1,
            de,
            ma,
            ep,
            ul,
            ll,
            pl,
            spare2,
            vn,
        ]
        outputdata2 = [
            pab_d[pab],
            mt_d[mt],
            rc_d[rc],
            dc_d[dc],
            atmo,
            atd,
            ath,
            atmi,
            it_d[it],
            spare1,
            co_d[co1],
            co_d[co2],
            co_d[co3],
            otd1,
            oth1,
            otm1,
            de,
            ma,
            ep_d[ep],
            ul_d[ul],
            ll_d[ll],
            *pllist_out[0],
            spare2,
            vn,
        ]
    elif dc == 2:  # 震源情報 ★未完成 辞書引用未記載★ 整形あり
        atmo = int(bin_msg[22:26], 2)
        atd = int(bin_msg[26:31], 2)
        # データーはUTC時間で配信されるため、表記は＋９時間してJTCにする
        ath = int(bin_msg[31:36], 2) + utctimeshift
        atmi = int(bin_msg[36:42], 2)
        it = int(bin_msg[42:44], 2)
        spare1 = int(bin_msg[44:54], 2)
        co1 = int(bin_msg[54:63], 2)
        co2 = int(bin_msg[63:72], 2)
        co3 = int(bin_msg[72:81], 2)
        otd = int(bin_msg[81:86], 2)
        # データーはUTC時間で配信されるため、表記は＋９時間してJTCにする
        oth = int(bin_msg[86:91], 2) + utctimeshift
        otm = int(bin_msg[91:97], 2)
        de = int(bin_msg[97:106], 2)
        ma = int(bin_msg[106:113], 2) / 10
        ep = int(bin_msg[113:123], 2)
        latns = int(bin_msg[123:124])
        latd = int(bin_msg[124:131], 2)
        latm = int(bin_msg[131:137], 2)
        lats = int(bin_msg[137:143], 2)
        lonew = int(bin_msg[143:144], 2)
        lond = int(bin_msg[144:152], 2)
        lonm = int(bin_msg[152:158], 2)
        lons = int(bin_msg[158:164], 2)
        spare2 = int(bin_msg[164:215], 2)
        vn = int(bin_msg[215:221], 2)
        reserved = int(bin_msg[221:227], 2)
        crc = int(bin_msg[227:251], 2)
        textdata = (
            pab_d[pab],
            mt_d[mt],
            "(",
            rc_d[rc],
            ")",
            dc_d[dc],
            it_d[it],
            "(第",
            vn,
            "報)",
            "\n",
            otd,
            "日",
            oth,
            "時",
            otm,
            "分",
            "ころ、地震がありました。",
            co_d[co1],
            "\n",
            co_d[co2],
            "\n",
            co_d[co3],
            "\n",
            atd,
            "日",
            ath,
            "時",
            atmi,
            "分発表",
            "\n",
            "震央地名：",
            ep_d[ep],
            "\n",
            "緯度経度：",
            latns_d[latns],
            latd,
            "度",
            latm,
            "分",
            lats,
            "秒",
            "\n",
            lonew_d[lonew],
            lond,
            "度",
            lonm,
            "分",
            lons,
            "秒",
            "\n",
            "深さ(km)",
            de,
            "km" "\n",
            "マグニチュード：",
            ma,
            "\n",
            atmo,
            "月",
            atd,
            "日",
            ath,
            "時",
            atmi,
            "分配信",
        )

        outputdata = [
            pab,
            mt,
            rc,
            dc,
            atmo,
            atd,
            ath,
            atmi,
            it,
            spare1,
            co1,
            co2,
            co3,
            otd,
            oth,
            otm,
            de,
            ma,
            ep,
            latns,
            latd,
            latm,
            lats,
            lonew,
            lond,
            lonm,
            lons,
            spare2,
            vn,
            reserved,
            crc,
        ]

        if ep_prefset == "none":
            prefchk = False

        if ep_prefset == "all":
            prefchk = True

        else:
            prefchk = ep_prefset in ep_d[ep]

    elif dc == 3:  # 震度情報  ★未完成 辞書引用未記載★ 整形あり
        atmo = int(bin_msg[22:26], 2)
        atd = int(bin_msg[26:31], 2)
        # データーはUTC時間で配信されるため、表記は＋９時間してJTCにする
        ath = int(bin_msg[31:36], 2) + utctimeshift
        atmi = int(bin_msg[36:42], 2)
        it = int(bin_msg[42:44], 2)
        spare1 = int(bin_msg[44:54], 2)
        otd = int(bin_msg[54:59], 2)
        # データーはUTC時間で配信されるため、表記は＋９時間してJTCにする
        oth = int(bin_msg[59:64], 2) + utctimeshift
        otm = int(bin_msg[64:70], 2)
        es_1 = int(bin_msg[70:73], 2)
        pl_1 = int(bin_msg[73:79], 2)
        es_2 = int(bin_msg[79:82], 2)
        pl_2 = int(bin_msg[82:88], 2)
        es_3 = int(bin_msg[88:91], 2)
        pl_3 = int(bin_msg[91:97], 2)
        es_4 = int(bin_msg[97:100], 2)
        pl_4 = int(bin_msg[100:106], 2)
        es_5 = int(bin_msg[106:109], 2)
        pl_5 = int(bin_msg[109:115], 2)
        es_6 = int(bin_msg[115:118], 2)
        pl_6 = int(bin_msg[118:124], 2)
        es_7 = int(bin_msg[124:127], 2)
        pl_7 = int(bin_msg[127:133], 2)
        es_8 = int(bin_msg[133:136], 2)
        pl_8 = int(bin_msg[136:142], 2)
        es_9 = int(bin_msg[142:145], 2)
        pl_9 = int(bin_msg[145:151], 2)
        es_10 = int(bin_msg[151:154], 2)
        pl_10 = int(bin_msg[154:160], 2)
        es_11 = int(bin_msg[160:163], 2)
        pl_11 = int(bin_msg[163:169], 2)
        es_12 = int(bin_msg[169:172], 2)
        pl_12 = int(bin_msg[172:178], 2)
        es_13 = int(bin_msg[178:181], 2)
        pl_13 = int(bin_msg[181:187], 2)
        es_14 = int(bin_msg[187:190], 2)
        pl_14 = int(bin_msg[190:196], 2)
        es_15 = int(bin_msg[196:199], 2)
        pl_15 = int(bin_msg[199:205], 2)
        es_16 = int(bin_msg[205:208], 2)
        pl_16 = int(bin_msg[208:214], 2)
        spare2 = int(bin_msg[214:215], 2)
        vn = int(bin_msg[215:221], 2)
        reserved = int(bin_msg[221:227], 2)
        crc = int(bin_msg[227:251], 2)

        print(
            pab_d[pab],
            mt_d[mt],
            "(",
            rc_d[rc],
            ")",
            "\n",
            dc_d[dc],
            it_d[it],
            "(第",
            vn,
            "報)",
            "\n",
            otd,
            "日",
            oth,
            "時",
            otm,
            "分",
            "ころ、地震による強い揺れを感じました。",
            "\n",
            atd,
            "日",
            ath,
            "時",
            atmi,
            "分発表",
            "\n",
        )
        print("対象地域(震度)")
        plist = (
            sipl_d[pl_1],
            sipl_d[pl_2],
            sipl_d[pl_3],
            sipl_d[pl_4],
            sipl_d[pl_5],
            sipl_d[pl_6],
            sipl_d[pl_7],
            sipl_d[pl_8],
            sipl_d[pl_9],
            sipl_d[pl_10],
            sipl_d[pl_11],
            sipl_d[pl_12],
            sipl_d[pl_13],
            sipl_d[pl_14],
            sipl_d[pl_15],
            sipl_d[pl_16],
        )
        eslist = (
            es_d[es_1],
            es_d[es_2],
            es_d[es_3],
            es_d[es_4],
            es_d[es_5],
            es_d[es_6],
            es_d[es_7],
            es_d[es_8],
            es_d[es_9],
            es_d[es_10],
            es_d[es_11],
            es_d[es_12],
            es_d[es_13],
            es_d[es_14],
            es_d[es_15],
            es_d[es_16],
        )
        plesm = (
            sipl_d[pl_1],
            " (",
            es_d[es_1],
            ")",
            "\n",
            sipl_d[pl_2],
            " (",
            es_d[es_2],
            ")",
            "\n",
            sipl_d[pl_3],
            " (",
            es_d[es_3],
            ")",
            "\n",
            sipl_d[pl_4],
            " (",
            es_d[es_4],
            ")",
            "\n",
            sipl_d[pl_5],
            " (",
            es_d[es_5],
            ")",
            "\n",
            sipl_d[pl_6],
            " (",
            es_d[es_6],
            ")",
            "\n",
            sipl_d[pl_7],
            " (",
            es_d[es_7],
            ")",
            "\n",
            sipl_d[pl_8],
            " (",
            es_d[es_8],
            ")",
            "\n",
            sipl_d[pl_9],
            " (",
            es_d[es_9],
            ")",
            "\n",
            sipl_d[pl_10],
            " (",
            es_d[es_10],
            ")",
            "\n",
            sipl_d[pl_11],
            " (",
            es_d[es_11],
            ")",
            "\n",
            sipl_d[pl_12],
            " (",
            es_d[es_12],
            ")",
            "\n",
            sipl_d[pl_13],
            " (",
            es_d[es_13],
            ")",
            "\n",
            sipl_d[pl_14],
            " (",
            es_d[es_14],
            ")",
            "\n",
            sipl_d[pl_15],
            " (",
            es_d[es_15],
            ")",
            "\n",
            sipl_d[pl_16],
            " (",
            es_d[es_16],
            ")",
            "\n",
        )

        plesj = " ".join(plesm)
        print(plesj)

        if sipl_prefset == "none":
            prefchk = False

        if sipl_prefset == "all":
            prefchk = True

        else:
            prefchk = sipl_prefset in plist

        # print(*ples,sep='\n')
        print(atmo, "月", atd, "日", ath, "時", atmi, "分配信", "\n")
        outputdata = [
            pab,
            mt,
            rc,
            dc,
            atmo,
            atd,
            ath,
            atmi,
            it,
            spare1,
            otd,
            oth,
            otm,
            es_1,
            pl_1,
            es_2,
            pl_2,
            es_3,
            pl_3,
            es_4,
            pl_4,
            es_5,
            pl_5,
            es_6,
            pl_6,
            es_7,
            pl_7,
            es_8,
            pl_8,
            es_9,
            pl_9,
            es_10,
            pl_10,
            es_11,
            pl_11,
            es_12,
            pl_12,
            es_13,
            pl_13,
            es_14,
            pl_14,
            es_15,
            pl_15,
            es_16,
            pl_16,
            spare2,
            vn,
            reserved,
            crc,
        ]
    elif dc == 4:  # 南海トラフ地震に関する情報(東海地震に関する情報) ★未完成 辞書引用未記載★ 整形/サウンド出力あり
        # https://www.data.jma.go.jp/svd/eew/data/nteq/index.html
        prefchk = nankaieq
        atmo = int(bin_msg[22:26], 2)
        atd = int(bin_msg[26:31], 2)
        # データーはUTC時間で配信されるため、表記は＋９時間してJTCにする
        ath = int(bin_msg[31:36], 2) + utctimeshift
        atmi = int(bin_msg[36:42], 2)
        it = int(bin_msg[42:44], 2)
        spare1 = int(bin_msg[44:54], 2)
        infos = int(bin_msg[54:58], 2)
        te = int(bin_msg[58:202], 2)
        text = bytes.fromhex(format(te, "0x")).decode(encoding="utf-8")
        pn = int(bin_msg[202:208], 2)
        tp = int(bin_msg[208:214], 2)
        spare2 = int(bin_msg[214:215], 2)
        vn = int(bin_msg[215:221], 2)
        outputdata = [
            pab,
            mt,
            rc,
            dc,
            atmo,
            atd,
            ath,
            atmi,
            it,
            spare1,
            infos,
            text,
            pn,
            tp,
            spare2,
            vn,
        ]
        textdata = (
            pab_d[pab],
            mt_d[mt],
            "(",
            rc_d[rc],
            ")",
            "\n",
            dc_d[dc],
            it_d[it],
            "(第",
            vn,
            "報)",
            "\n",
            atmo,
            "月",
            atd,
            "日",
            ath,
            "時",
            atmi,
            "分配信",
            "\n",
            "\n",
            atd,
            "日",
            ath,
            "時",
            atmi,
            "分発表",
            "\n",
            infos_d[infos],
            "\n",
            "\n",
            text,
            "\n",
            "\n",
            pn,
            "ページ目",
            "(",
            tp,
            "ページ中",
            ")",
            "\n",
        )
    # winsound.PlaySound("./Sound_Wav/UtopiaMessage(Infomation).wav", winsound.SND_FILENAME)
    elif dc == 5:  # 津波情報 ☆完成☆ 整形/ファイル出力あり
        atmo = int(bin_msg[22:26], 2)
        atd = int(bin_msg[26:31], 2)
        # データーはUTC時間で配信されるため、表記は＋９時間してJTCにする
        ath = int(bin_msg[31:36], 2) + utctimeshift
        atmi = int(bin_msg[36:42], 2)
        it = int(bin_msg[42:44], 2)
        spare1 = int(bin_msg[44:54], 2)
        co1 = int(bin_msg[54:63], 2)
        co2 = int(bin_msg[63:72], 2)
        co3 = int(bin_msg[72:81], 2)
        dwts = int(bin_msg[81:85], 2)
        co1 = int(bin_msg[54:63], 2)
        co2 = int(bin_msg[63:72], 2)
        co3 = int(bin_msg[72:81], 2)
        dw = int(bin_msg[81:85], 2)
        tad1 = int(bin_msg[85:86], 2) + atd
        # データーはUTC時間で配信されるため、表記は＋９時間してJTCにする
        tah1 = int(bin_msg[86:91], 2) + utctimeshift
        tam1 = int(bin_msg[91:97], 2)
        th1 = int(bin_msg[97:101], 2)
        pl_1 = int(bin_msg[101:111], 2)
        tad2 = int(bin_msg[111:112], 2) + atd
        # データーはUTC時間で配信されるため、表記は＋９時間してJTCにする
        tah2 = int(bin_msg[112:117], 2) + utctimeshift
        tam2 = int(bin_msg[117:123], 2)
        th2 = int(bin_msg[123:127], 2)
        pl_2 = int(bin_msg[127:137], 2)
        tad3 = int(bin_msg[137:138], 2) + atd
        # データーはUTC時間で配信されるため、表記は＋９時間してJTCにする
        tah3 = int(bin_msg[138:143], 2) + utctimeshift
        tam3 = int(bin_msg[143:149], 2)
        th3 = int(bin_msg[149:153], 2)
        pl_3 = int(bin_msg[153:163], 2)
        tad4 = int(bin_msg[163:164], 2) + atd
        # データーはUTC時間で配信されるため、表記は＋９時間してJTCにする
        tah4 = int(bin_msg[164:169], 2) + utctimeshift
        tam4 = int(bin_msg[169:175], 2)
        th4 = int(bin_msg[175:179], 2)
        pl_4 = int(bin_msg[179:189], 2)
        tad5 = int(bin_msg[189:190], 2) + atd
        # データーはUTC時間で配信されるため、表記は＋９時間してJTCにする
        tah5 = int(bin_msg[190:195], 2) + utctimeshift
        tam5 = int(bin_msg[195:201], 2)
        th5 = int(bin_msg[201:205], 2)
        pl_5 = int(bin_msg[205:215], 2)
        vn = int(bin_msg[215:221], 2)
        reserved = int(bin_msg[221:227], 2)
        crc = int(bin_msg[227:252], 2)
        """
        print(
            pab_d[pab],
            mt_d[mt],
            "(",
            rc_d[rc],
            ")",
            "\n",
            dc_d[dc],
            it_d[it],
            "(第",
            vn,
            "報)",
            "\n",
            tsdw_d[dw],
            "を発表しました。",
            "\n",
            atd,
            "日",
            ath,
            "時",
            atmi,
            "分発表",
            "\n",
        )
        print()
        # plist = tspl_d[pl_1], tspl_d[pl_2], tspl_d[pl_3], tspl_d[pl_4], tspl_d[pl_5]
        tadlist = tad1, tad2, tad3, tad4, tad5
        tahlist = tah1, tah2, tah3, tah4, tah5
        tamlist = tam1, tam2, tam3, tam4, tam5
        thlist = (
            tshi_d[th1],
            tshi_d[th2],
            tshi_d[th3],
            tshi_d[th4],
            tshi_d[th5],
        )
        """
        thpldhmth = (
            "対象地域(予想される津波の高さ)",
            "\n",
            tspl_d[pl_1],
            "高さ：",
            tshi_d[th1],
            "\n",
            "到達予想時刻：",
            tad1,
            "日",
            tah1,
            "時",
            tam1,
            "分",
            "\n",
            tspl_d[pl_2],
            "高さ：",
            tshi_d[th2],
            "\n",
            "到達予想時刻：",
            tad2,
            "日",
            tah2,
            "時",
            tam2,
            "分",
            "\n",
            tspl_d[pl_3],
            "高さ：",
            tshi_d[th3],
            "\n",
            "到達予想時刻：",
            tad3,
            "日",
            tah3,
            "時",
            tam3,
            "分",
            "\n",
            tspl_d[pl_4],
            "\n",
            "高さ：",
            tshi_d[th4],
            "到達予想時刻：",
            tad4,
            "日",
            tah4,
            "時",
            tam4,
            "分",
            "\n",
            tspl_d[pl_5],
            "\n",
            "高さ：",
            tshi_d[th5],
            "到達予想時刻：",
            tad5,
            "日",
            tah5,
            "時",
            "分",
            "\n",
        )
        """
        print("防災上の留意事項はコメントアウト中")
        with open('A:\\Users\\maima\\OneDrive\\QZSS受信機計画\\サンプル\\QZSS_Reciver_Web\\text\\tsunami.txt', 'w',encoding="UTF-8") as f:
        """
        plthj = " ".join((map(str, thpldhmth)))

        if tsu_prefset == "none":
            prefchk = False

        if tsu_prefset == "all":
            prefchk = True

        else:
            prefchk = tsu_prefset in plthj

        # print(plthj)
        # print(co_d[co1], "\n", co_d[co2], "\n", co_d[co3], "\n")

        textdata = (
            pab_d[pab],
            mt_d[mt],
            "(",
            rc_d[rc],
            ")",
            "\n",
            dc_d[dc],
            it_d[it],
            "(第",
            vn,
            "報)",
            "\n",
            tsdw_d[dw],
            "を発表しました。",
            "\n",
            plthj,
            atd,
            "日",
            ath,
            "時",
            atmi,
            "分発表",
            "\n",
            co_d[co1],
            "\n",
            co_d[co2],
            "\n",
            co_d[co3],
        )
        outputdata = [
            pab,
            mt,
            rc,
            dc,
            atmo,
            atd,
            ath,
            atmi,
            it,
            spare1,
            co1,
            co2,
            co3,
            dw,
            tad1,
            tah1,
            tam1,
            th1,
            pl_1,
            tad2,
            tah2,
            tam2,
            th2,
            pl_2,
            tad3,
            tah3,
            tam3,
            th3,
            pl_3,
            tad4,
            tah4,
            tam4,
            th4,
            pl_4,
            tad5,
            tah5,
            tam5,
            th5,
            pl_5,
            vn,
            reserved,
            crc,
        ]
        outputdata2 = [
            pab_d[pab],
            mt_d[mt],
            rc_d[rc],
            dc_d[dc],
            atmo,
            atd,
            ath,
            atmi,
            it_d[it],
            spare1,
            co_d[co1],
            co_d[co2],
            co_d[co3],
            tsdw_d[dw],
            tad1,
            tah1,
            tam1,
            th1,
            tspl_d[pl_1],
            tad2,
            tah2,
            tam2,
            th2,
            tspl_d[pl_2],
            tad3,
            tah3,
            tam3,
            th3,
            tspl_d[pl_3],
            tad4,
            tah4,
            tam4,
            th4,
            tspl_d[pl_4],
            tad5,
            tah5,
            tam5,
            th5,
            tspl_d[pl_5],
            vn,
            reserved,
            crc,
        ]
    elif dc == 6:  # 北西太平洋津波情報 ★未完成　辞書引用未記載★
        print("北西太平洋津波情報を発表しました。")
        atmo = int(bin_msg[22:26], 2)
        atd = int(bin_msg[26:31], 2)
        # データーはUTC時間で配信されるため、表記は＋９時間してJTCにする
        ath = int(bin_msg[31:36], 2) + utctimeshift
        atmi = int(bin_msg[36:42], 2)
        it = int(bin_msg[42:44], 2)
        spare1 = int(bin_msg[44:54], 2)
        tp = int(bin_msg[54:57], 2)
        tad1 = int(bin_msg[57:58], 2)
        tah1 = int(bin_msg[58:63], 2)
        tam1 = int(bin_msg[63:69], 2)
        th1 = int(bin_msg[69:78], 2)
        pl1 = int(bin_msg[78:85], 2)
        # 5回繰り返す
        thplta = (bin_msg[85:197], 2)
        spare2 = int(bin_msg[197:215], 2)
        vn = int(bin_msg[215:221], 2)
        # reserved = int(bin_msg[221:227],2)
        # crc = int(bin_msg[227:252],2)
        outputdata = [
            pab,
            mt,
            rc,
            dc,
            atmo,
            atd,
            ath,
            atmi,
            it,
            spare1,
        ]
        prefchk = nwtpinfo
    elif dc == 7:  # 未定義情報(7) ☆完成☆
        print("未定義情報７です。")
        outputdata = ["7"]
        outputdata2 = ["7"]
    elif dc == 8:  # 火山情報 ★辞書引用未記載★　整形あり
        print("火山に関する情報をお知らせします。")
        atmo = int(bin_msg[22:26], 2)
        atd = int(bin_msg[26:31], 2)
        # データーはUTC時間で配信されるため、表記は＋９時間してJTCにする
        ath = int(bin_msg[31:36], 2) + utctimeshift
        atmi = int(bin_msg[36:42], 2)
        it = int(bin_msg[42:44], 2)
        spare1 = int(bin_msg[44:51], 2)
        du = int(bin_msg[51:54], 2)
        tdd = int(bin_msg[54:59], 2)
        tdh = int(bin_msg[59:64], 2)
        tdm = int(bin_msg[64:70], 2)
        dw = int(bin_msg[70:77], 2)
        vo = int(bin_msg[77:89], 2)
        pl1 = int(bin_msg[89:112], 2)
        pl2 = int(bin_msg[112:135], 2)
        pl3 = int(bin_msg[135:158], 2)
        pl4 = int(bin_msg[158:181], 2)
        pl5 = int(bin_msg[181:204], 2)
        spare2 = int(bin_msg[204:215], 2)
        vn = int(bin_msg[215:221], 2)
        reserved = int(bin_msg[221:227], 2)
        crc = int(bin_msg[227:250], 2)

        outputdata = [
            pab,
            mt,
            rc,
            dc,
            atmo,
            atd,
            ath,
            atmi,
            it,
            spare1,
            du,
            tdd,
            tdh,
            tdm,
            dw,
            vo,
            pl1,
            pl2,
            pl3,
            pl4,
            pl5,
            spare2,
            vn,
            reserved,
            crc,
        ]
        # print(outputdata)
        print(
            pab_d[pab],
            mt_d[mt],
            "(",
            rc_d[rc],
            ")",
            "\n",
            dc_d[dc],
            it_d[it],
            "(第",
            vn,
            "報)",
            "\n",
            atmo,
            "月",
            atd,
            "日",
            ath,
            "時",
            atmi,
            "分配信",
            "\n",
            "\n",
            atd,
            "日",
            ath,
            "時",
            atmi,
            "分発生",
            "\n",
            "Ambiguity of Activity Time：",
            du,
            "\n",
            "日時：",
            tdd,
            "日",
            tdh,
            "時",
            tdm,
            "分",
            "\n",
            "\n",
            "現象：",
            vodw_d[dw],
            "\n",
            "火山名：",
            vo,
            "\n",
            "\n",
            "対象地域：",
            pl1,
            "　",
            pl2,
            "　",
            pl3,
            "　",
            pl4,
            "　",
            pl5,
            "\n",
        )
    elif dc == 9:  # 降灰情報 ★未完成　辞書引用未記載★
        print("降灰情報")
        atmo = int(bin_msg[22:26], 2)
        atd = int(bin_msg[26:31], 2)
        # データーはUTC時間で配信されるため、表記は＋９時間してJTCにする
        ath = int(bin_msg[31:36], 2) + utctimeshift
        atmi = int(bin_msg[36:42], 2)
        it = int(bin_msg[42:44], 2)
        spare1 = int(bin_msg[44:54], 2)
        tdd = int(bin_msg[54:59], 2)
        tdh = int(bin_msg[59:64], 2)
        tdm = int(bin_msg[64:70], 2)
        dw = int(bin_msg[70:72], 2)
        vo = int(bin_msg[72:84], 2)
        ho1 = int(bin_msg[84:87], 2)
        dw1 = int(bin_msg[87:90], 2)
        pl1 = int(bin_msg[90:113], 2)
        ho2 = int(bin_msg[113:116], 2)
        dw2 = int(bin_msg[116:119], 2)
        pl2 = int(bin_msg[119:142], 2)
        ho3 = int(bin_msg[142:145], 2)
        dw3 = int(bin_msg[145:148], 2)
        pl3 = int(bin_msg[148:171], 2)
        ho4 = int(bin_msg[171:174], 2)
        dw4 = int(bin_msg[174:177], 2)
        pl4 = int(bin_msg[177:200], 2)
        spare2 = int(bin_msg[200:215], 2)
        vn = int(bin_msg[215:221], 2)
        reserved = int(bin_msg[221:227], 2)
        crc = int(bin_msg[227:250], 2)
        outputdata = [
            pab,
            mt,
            rc,
            dc,
            atmo,
            atd,
            ath,
            atmi,
            it,
            spare1,
            tdd,
            tdh,
            tdm,
            dw,
            vo,
            ho1,
            dw1,
            pl1,
            spare2,
            vn,
            reserved,
            crc,
        ]
        # print(outputdata)
        print(
            pab_d[pab],
            mt_d[mt],
            "(",
            rc_d[rc],
            ")",
            "\n",
            dc_d[dc],
            it_d[it],
            "(第",
            vn,
            "報)",
            "\n",
            atmo,
            "月",
            atd,
            "日",
            ath,
            "時",
            atmi,
            "分配信",
            "\n",
            "\n",
            atd,
            "日",
            ath,
            "時",
            atmi,
            "分発生",
            "\n",
            "Ambiguity of Activity Time：",
            "\n",
            "日時：",
            tdd,
            "日",
            tdh,
            "時",
            tdm,
            "分",
            "\n",
            "火山名：",
            vo,
            "\n",
            "現象：",
            vodw_d[dw],
            "\n",
            "現象(１)：",
            dw1,
            "発生から経過した時間：",
            ho1,
            "対象地域：",
            pl1,
            "\n",
        )
    elif dc == 10:  # 気象情報 ★辞書引用未記載★
        print("気象情報")
        atmo = int(bin_msg[22:26], 2)
        atd = int(bin_msg[26:31], 2)
        ath = int(bin_msg[31:36], 2)
        atmi = int(bin_msg[36:42], 2)
        it = int(bin_msg[42:44], 2)
        spare1 = int(bin_msg[44:54], 2)
        ar = int(bin_msg[54:57], 2)
        ww1 = int(bin_msg[57:62], 2)
        wpl1 = int(bin_msg[62:81], 2)
        ww2 = int(bin_msg[81:86], 2)
        wpl2 = int(bin_msg[86:105], 2)
        ww3 = int(bin_msg[105:110], 2)
        wpl3 = int(bin_msg[110:129], 2)
        ww4 = int(bin_msg[129:134], 2)
        wpl4 = int(bin_msg[134:153], 2)
        ww5 = int(bin_msg[153:158], 2)
        wpl5 = int(bin_msg[158:177], 2)
        ww6 = int(bin_msg[177:182], 2)
        wpl6 = int(bin_msg[182:201], 2)
        spare2 = int(bin_msg[201:215], 2)
        vn = int(bin_msg[215:221], 2)
        reserved = int(bin_msg[221:227], 2)
        crc = int(bin_msg[227:250], 2)

        print(
            pab_d[pab],
            mt_d[mt],
            "(",
            rc_d[rc],
            ")",
            "\n",
            dc_d[dc],
            it_d[it],
            "(第",
            vn,
            "報)",
            "\n",
            atmo,
            "月",
            atd,
            "日",
            ath,
            "時",
            atmi,
            "分配信",
            "\n",
            "\n",
            atd,
            "日",
            ath,
            "時",
            atmi,
            "分発表",
            "\n",
            "対象地域(内容)\n",
            wwpl_d[wpl1],
            "(",
            ww_d[ww1],
            ")\n",
            wwpl_d[wpl2],
            "(",
            ww_d[ww2],
            ")\n",
            wwpl_d[wpl3],
            "(",
            ww_d[ww3],
            ")\n",
            wwpl_d[wpl4],
            "(",
            ww_d[ww4],
            ")\n",
            wwpl_d[wpl5],
            "(",
            ww_d[ww5],
            ")\n",
            wwpl_d[wpl6],
            "(",
            ww_d[ww6],
            ")\n",
        )

        outputdata = [
            pab,
            mt,
            rc,
            dc,
            atmo,
            atd,
            ath,
            atmi,
            it,
            spare1,
            ww1,
            wpl1,
            ww2,
            wpl2,
            ww3,
            wpl3,
            ww4,
            wpl4,
            ww5,
            wpl5,
            ww6,
            wpl6,
            spare2,
            vn,
            reserved,
            crc,
        ]
        # print(outputdata)
    elif dc == 11:  # 洪水情報 ★未完成　辞書引用未記載★
        print("洪水情報")
        atmo = int(bin_msg[22:26], 2)
        atd = int(bin_msg[26:31], 2)
        # データーはUTC時間で配信されるため、表記は＋９時間してJTCにする
        ath = int(bin_msg[31:36], 2) + utctimeshift
        atmi = int(bin_msg[36:42], 2)
        it = int(bin_msg[42:44], 2)
        spare1 = int(bin_msg[44:54], 2)
        ar = int(bin_msg[54:57], 2)
        ww1 = int(bin_msg[57:62], 2)
        pl1 = int(bin_msg[62:81], 2)
        ww2 = int(bin_msg[81:86], 2)
        pl2 = int(bin_msg[86:105], 2)
        ww3 = int(bin_msg[105:110], 2)
        pl3 = int(bin_msg[110:129], 2)
        ww4 = int(bin_msg[129:134], 2)
        pl4 = int(bin_msg[134:153], 2)
        ww5 = int(bin_msg[153:158], 2)
        pl5 = int(bin_msg[158:177], 2)
        ww6 = int(bin_msg[177:182], 2)
        pl6 = int(bin_msg[182:201], 2)
        spare2 = int(bin_msg[201:215], 2)
        vn = int(bin_msg[215:221], 2)
        reserved = int(bin_msg[221:227], 2)
        crc = int(bin_msg[227:250], 2)
        outputdata = [
            pab,
            mt,
            rc,
            dc,
            atmo,
            atd,
            ath,
            atmi,
            it,
            spare1,
            pl1,
            ww1,
            spare2,
            vn,
            reserved,
            crc,
        ]
        prefchk = flood_prefset
        textdata = "洪水予報"
        # print(outputdata)
    elif dc == 12:  # 台風情報 ★辞書引用未記載★
        print("台風情報")
        atmo = int(bin_msg[22:26], 2)
        atd = int(bin_msg[26:31], 2)
        ath = int(bin_msg[31:36], 2)  # データーはUTC時間で配信されるため、表記は＋９時間してJTCにする
        atmi = int(bin_msg[36:42], 2)
        it = int(bin_msg[42:44], 2)
        spare1 = int(bin_msg[44:54], 2)
        btd = int(bin_msg[54:59], 2)
        bth = int(bin_msg[59:64], 2)
        btm = int(bin_msg[64:70], 2)
        dt = int(bin_msg[70:73], 2)
        spare2 = int(bin_msg[73:81], 2)
        du = int(bin_msg[81:88], 2)
        tn = int(bin_msg[88:95], 2)
        sc = int(bin_msg[95:99], 2)
        ic = int(bin_msg[99:103], 2)
        latns = int(bin_msg[103:104], 2)
        latd = int(bin_msg[104:111], 2)
        latm = int(bin_msg[111:117], 2)
        lats = int(bin_msg[117:123], 2)
        lonew = int(bin_msg[123:124], 2)
        lond = int(bin_msg[124:132], 2)
        lonm = int(bin_msg[132:138], 2)
        lons = int(bin_msg[138:144], 2)
        pr = int(bin_msg[144:155], 2)
        ws = int(bin_msg[155:162], 2)
        wgs = int(bin_msg[162:169], 2)
        spare3 = int(bin_msg[169:215], 2)
        vn = int(bin_msg[215:221], 2)
        reserved = int(bin_msg[221:227], 2)
        crc = int(bin_msg[227:251], 2)
        outputdata = [
            pab,
            mt,
            rc,
            dc,
            atmo,
            atd,
            ath,
            atmi,
            it,
            spare1,
            btd,
            btd,
            btm,
            dt,
            spare2,
            du,
            tn,
            sc,
            ic,
            latns,
            latd,
            latm,
            lats,
            lonew,
            lond,
            lonm,
            lons,
            pr,
            ws,
            wgs,
            spare3,
            vn,
            reserved,
            crc,
        ]

        textdata = [
            pab_d[pab],
            mt_d[mt],
            "(",
            rc_d[rc],
            ")",
            "\n",
            dc_d[dc],
            it_d[it],
            "(第",
            vn,
            "報)",
            "\n",
            atmo,
            "月",
            atd,
            "日",
            ath,
            "時",
            atmi,
            "分配信",
            "\n",
            "\n",
            atd,
            "日",
            ath,
            "時",
            atmi,
            "分発生",
            "\n",
            it_d[it],
            spare1,
            "基点時刻",
            btd,
            "日",
            bth,
            "時",
            btm,
            "分",
            "\n",
            dt_d[dt],
            spare2,
            "基点時刻から",
            du,
            "時間後",
            "\n",
            "台風番号：",
            tn,
            "\n",
            "台風の大きさ:",
            ts_d[sc],
            "\n",
            "台風の強さ:",
            ti_d[ic],
            "\n",
            "緯度経度：",
            latns_d[latns],
            latd,
            "度",
            latm,
            "分",
            lats,
            "秒",
            "\n",
            lonew_d[lonew],
            lond,
            "度",
            lonm,
            "分",
            lons,
            "秒",
            "\n",
            "中心気圧",
            pr,
            "hPa",
            "最大風速:",
            ws,
            "m/s",
            "瞬間最大風速：",
            wgs,
            "m/s",
        ]

        prefchk = typoon_prefset

    elif dc == 13:  # 未定義情報(１３) ☆完成☆
        print("未定義情報１３です。")
        outputdata = ["13"]
        outputdata2 = ["13"]
    elif dc == 14:  # 海上気象情報 ☆完成☆　整形あり

        # 海上警報・海上予報とは
        # https://www.jma.go.jp/jma/kishou/know/kurashi/umiyoho.html
        # print("海上気象情報")
        atmo = int(bin_msg[22:26], 2)
        atd = int(bin_msg[26:31], 2)
        # データーはUTC時間で配信されるため、表記は＋９時間してJTCにする
        ath = int(bin_msg[31:36], 2) + utctimeshift
        atmi = int(bin_msg[36:42], 2)
        it = int(bin_msg[42:44], 2)
        spare1 = int(bin_msg[44:54], 2)
        dw1 = int(bin_msg[54:59], 2)
        mpl1 = int(bin_msg[59:73], 2)
        dw2 = int(bin_msg[73:78], 2)
        mpl2 = int(bin_msg[78:92], 2)
        dw3 = int(bin_msg[92:97], 2)
        mpl3 = int(bin_msg[97:111], 2)
        dw4 = int(bin_msg[111:116], 2)
        mpl4 = int(bin_msg[116:130], 2)
        dw5 = int(bin_msg[130:135], 2)
        mpl5 = int(bin_msg[135:149], 2)
        dw6 = int(bin_msg[149:154], 2)
        mpl6 = int(bin_msg[154:168], 2)
        dw7 = int(bin_msg[168:173], 2)
        mpl7 = int(bin_msg[173:187], 2)
        dw8 = int(bin_msg[187:192], 2)
        mpl8 = int(bin_msg[192:206], 2)
        spare2 = int(bin_msg[206:215], 2)
        vn = int(bin_msg[215:221], 2)
        reserved = int(bin_msg[221:227], 2)
        crc = int(bin_msg[227:251], 2)

        outputdata = [
            pab,
            mt,
            rc,
            dc,
            atmo,
            atd,
            ath,
            atmi,
            it,
            spare1,
            dw1,
            mpl1,
            dw2,
            mpl2,
            dw3,
            mpl3,
            dw4,
            mpl4,
            dw5,
            mpl5,
            dw6,
            mpl6,
            spare2,
            vn,
            reserved,
            crc,
        ]
        outputdata2 = [
            pab_d[pab],
            mt_d[mt],
            rc_d[rc],
            dc_d[dc],
            atmo,
            atd,
            ath,
            atmi,
            it_d[it],
            spare1,
            mdw_d[dw1],
            mpl_d[mpl1],
            mdw_d[dw2],
            mpl_d[mpl2],
            mdw_d[dw3],
            mpl_d[mpl3],
            mdw_d[dw4],
            mpl_d[mpl4],
            mdw_d[dw5],
            mpl_d[mpl5],
            mdw_d[dw6],
            mpl_d[mpl6],
            spare2,
            vn,
            reserved,
            crc,
        ]
        print(
            pab_d[pab],
            mt_d[mt],
            "(",
            rc_d[rc],
            ")",
            "\n",
            dc_d[dc],
            it_d[it],
            "(第",
            vn,
            "報)",
            "\n",
            atmo,
            "月",
            atd,
            "日",
            ath,
            "時",
            atmi,
            "分配信",
            "\n",
            "\n",
            atd,
            "日",
            ath,
            "時",
            atmi,
            "分発表",
            "\n",
            "対象地域(内容)\n",
            mpl_d[mpl1],
            "(",
            mdw_d[dw1],
            ")\n",
            mpl_d[mpl2],
            "(",
            mdw_d[dw2],
            ")\n",
            mpl_d[mpl3],
            "(",
            mdw_d[dw3],
            ")\n",
            mpl_d[mpl4],
            "(",
            mdw_d[dw4],
            ")\n",
            mpl_d[mpl5],
            "(",
            mdw_d[dw5],
            ")\n",
            mpl_d[mpl6],
            "(",
            mdw_d[dw6],
            ")\n",
        )
        prefchk = "海上"


# MT44解析部
elif mt == 44:
    dcxmt_d = {
        0: "試験(Test)",
        1: "警報(Alert)",
        10: "更新(Update)",
        11: "全解除(All Clear)",
    }
    crname_d = {
        0: "Afghanistan",
        1: "Albania",
        10: "Antarctica",
        1101111: "Japan",
        11111000: "Zambia",
        11111001: "Reserved",
        111111111: "Reserved",
    }
    pij_d = {
        0: "",
        1: "マルチメディア振興センター(Ｌアラート)",
        2: "総務省消防庁(Ｊアラート)",
        3: "関連省庁(RelatedMinistries)",
        4: "自治体(Municipality)",
        5: "Reserved",
        6: "Reserved",
        7: "Reserved",
        8: "Reserved",
        9: "Reserved",
        10: "Reserved",
        11: "Reserved",
        12: "Reserved",
        13: "Reserved",
        14: "Reserved",
        15: "Reserved",
        16: "Reserved",
        17: "Reserved",
        18: "Reserved",
        19: "Reserved",
        20: "Reserved",
        21: "Reserved",
        22: "Reserved",
        23: "Reserved",
        24: "Reserved",
        25: "Reserved",
        26: "Reserved",
        27: "Reserved",
        28: "Reserved",
        29: "Reserved",
        30: "Reserved",
        31: "Reserved",
    }
    hct_d = {
        0: "未使用",
        1: "空爆",
        2: "電子攻撃",
        3: "核攻撃",
        4: "生物災害",
        5: "化学物質災害",
        6: "爆発災害",
        7: "隕石衝突",
        8: "ミサイル攻撃",
        9: "核災害",
        10: "原子力発電所事故",
        11: "放射線災害",
        12: "衛星／デブリの落下",
        13: "サイレンテスト",
        14: "酸性雨",
        15: "大気汚染",
        16: "飲料水汚染",
        17: "ガス漏れ",
        18: "海洋汚染",
        19: "騒音公害",
        20: "昆虫の疫病",
        21: "河川汚染",
        22: "浮遊粉塵",
        23: "紫外線",
        24: "大火災",
        25: "消防隊派遣",
        26: "ガス火災",
        27: "森林火災",
        28: "煙",
        29: "悪臭",
        30: "火災の危険",
        31: "建物／工場火災",
        32: "火山灰降下",
        33: "雪崩の危険",
        34: "地面の亀裂／陥没",
        35: "土石流",
        36: "自身",
        37: "地磁気嵐／太陽嵐",
        38: "氷河雪崩",
        39: "地滑り",
        40: "溶岩流",
        41: "火砕流",
        42: "雪の吹きだまり",
        43: "潮汐波",
        44: "津波",
        45: "火山泥流",
        46: "火山噴火",
        47: "風/波/高潮",
        48: "伝染病",
        49: "食品安全警告",
        50: "健康被害",
        51: "パンデミック",
        52: "害虫の蔓延",
        53: "感染リスク",
        54: "建物の倒壊",
        55: "緊急通報番号の停止",
        56: "ガス供給停止",
        57: "ＩＴシステムの停止",
        58: "停電",
        59: "未処理下水",
        60: "電話回線の停止",
        61: "ブラックアイスバーン",
        62: "沿岸洪水",
        63: "寒波",
        64: "Derecho",
        65: "干ばつ",
        66: "砂嵐",
        67: "浮氷／氷山",
        68: "洪水",
        69: "霧",
        70: "雹",
        71: "熱波",
        72: "雷",
        73: "花粉",
        74: "降雨量",
        75: "吹雪／猛吹雪",
        76: "降雪",
        77: "嵐／雷雨",
        78: "融雪",
        79: "竜巻",
        80: "熱帯低気圧(ハリケーン)",
        81: "寒気／霜",
        82: "熱帯低気圧(台風)",
        83: "ダムの決壊／決壊",
        84: "堤防の決壊／決壊",
        85: "爆発物処理",
        86: "工場事故",
        87: "鉱山災害",
        88: "爆弾／爆発物の発見",
        89: "デモンストレーション",
        90: "危険物事故",
        91: "生命を脅かす状況",
        92: "主要イベント",
        93: "行方不明者／誘拐",
        94: "爆発の危険",
        95: "安全警告",
        96: "未確認の飛行物体",
        97: "未確認生物",
        98: "化学攻撃(セキュリティ)",
        99: "ゲリラ攻撃(セキュリティ)",
        100: "ハイジャック(セキュリティ)",
        101: "銃撃／武器による危険(セキュリティ)",
        102: "特殊攻撃(セキュリティ)",
        103: "テロ行為(セキュリティ)",
        104: "航空機墜落事故",
        105: "橋の崩落",
        106: "危険物事故(輸送)",
        107: "内陸水路輸送事故",
        108: "海難事故／海事／海洋安全保障",
        109: "油の流出",
        110: "道路交通事故",
        111: "列車事故",
        112: "トンネル事故",
        113: "テストアラート",
        114: "reserved",
        115: "reserved",
        116: "reserved",
        117: "reserved",
        118: "reserved",
        119: "reserved",
        120: "reserved",
        121: "reserved",
        122: "reserved",
        123: "reserved",
        124: "reserved",
        125: "reserved",
        126: "reserved",
        127: "reserved",
    }
    """
    hcten_d = {
        0: "None",
        1: "CBRNE - Air strike ",
        8: "CBRNE - Missile attack",
        9: "CBRNE - Nuclear hazard ",
        10: "CBRNE - Attack on IT systems ",
        11: "CBRNE - Attack with nuclear weapons ",
        90: "",
        95: "SAFETY - Safety warning",
        100: "CBRNE - Biological hazard ",
        101: "CBRNE - Chemical hazard ",
        110: "CBRNE - Explosive hazard ",
        111: "CBRNE - Meteorite impact ",
        1000: "CBRNE – Missile attack ",
        1001: "CBRNE - Nuclear hazard ",
        1010: "CBRNE - Nuclear power station accident ",
        1011: "CBRNE - Radiological hazard ",
        1100: "CBRNE - Satellite/space re-entry debris ",
        1101: "CBRNE - Siren test ",
        1110: "ENVIRONMENT - Acid rain ",
        1111: "ENVIRONMENT - Air pollution ",
        10000: "ENVIRONMENT - Contaminated drinking water ",
        10001: "ENVIRONMENT - Gas leak ",
        10010: "ENVIRONMENT - Marine pollution ",
        10011: "ENVIRONMENT - Noise pollution ",
        10100: "ENVIRONMENT - Plague of insects ",
        10101: "ENVIRONMENT - River pollution ",
        10110: "ENVIRONMENT – Suspended dust ",
        10111: "ENVIRONMENT – UV radiation ",
        11000: "FIRE – Conflagration ",
        11001: "FIRE - Fire brigade deployment ",
        11010: "FIRE - Fire gases ",
        11011: "FIRE - Forest fire ",
        11100: "FIRE - Fumes ",
        11101: "FIRE - Odour nuisance ",
        11110: "FIRE - Risk of fire ",
        11111: "FIRE - Structure fire / Industrial fire ",
        100000: "GEO - Ash fall ",
        100001: "GEO - Avalanche risk ",
        100010: "GEO - Crack in the ground/sinkhole ",
        100011: "GEO - Debris flow ",
        100100: "GEO - Earthquake ",
        100101: "GEO - Geomagnetic or solar storm ",
        100110: "GEO - Glacial ice avalanche ",
        100111: "GEO - Landslide ",
        101000: "GEO - Lava flow ",
        101001: "GEO - Pyroclastic flow ",
        101010: "GEO - Snowdrifts ",
        101011: "GEO - Tidal wave ",
        101100: "GEO - Tsunami ",
        101101: "GEO - Volcanic mud flow ",
        101110: "GEO - Volcano eruption ",
        101111: "GEO - Wind/wave/storm surge ",
        110000: "HEALTH - Epizootic ",
        110001: "HEALTH - Food safety alert ",
        110010: "HEALTH - Health hazard ",
        110011: "HEALTH - Pandemic ",
        110100: "HEALTH - Pest infestation ",
        110101: "HEALTH - Risk of infection ",
        110110: "INFRASTRUCTURE - Building collapse ",
        110111: "INFRASTRUCTURE - Emergency number outage ",
        111000: "INFRASTRUCTURE - Gas supply outage ",
        111001: "INFRASTRUCTURE – Outage of IT systems ",
        111010: "INFRASTRUCTURE - Power outage ",
        111011: "INFRASTRUCTURE – Raw sewage ",
        111100: "INFRASTRUCTURE - Telephone line outage ",
        111101: "MET - Black Ice ",
        111110: "MET - Coastal flooding ",
        111111: "MET - Cold wave ",
        1000000: "MET - Derecho ",
        1000001: "MET - Drought  ",
        1000010: "MET - Dust storm ",
        1000011: "MET - Floating ice / icebergs ",
        1000100: "MET - Flood ",
        1000101: "MET - Fog ",
        1000110: "MET - Hail  ",
        1000111: "MET - Heat wave ",
        1001000: "MET - Lightning ",
        1001001: "MET - Pollens ",
        1001010: "MET - Rainfall ",
        1001011: "MET - Snow storm / blizzard ",
        1001100: "MET - Snowfall ",
        1001101: "MET - Storm or thunderstorm ",
        1001110: "MET - Thawing ",
        1001111: "MET - Tornado ",
        1010000: "MET - Tropical cyclone (hurricane) ",
        1010001: "MET - Wind chill/frost ",
        1010010: "MET - Tropical cyclone (typhoon) ",
        1010011: "RESCUE - Dam failure or bursting of a dam ",
        1010100: "RESCUE - Dike failure or bursting of a dike ",
        1010101: "RESCUE - Explosive ordnance disposal ",
        1010110: "RESCUE - Factory accident ",
        1010111: "RESCUE - Mine hazard ",
        1011000: "SAFETY - Bomb/ammunition discovery ",
        1011001: "SAFETY - Demonstration ",
        1011010: "SAFETY - Hazardous material accident ",
        1011011: "SAFETY - Life Threatening situation ",
        1011100: "SAFETY - Major event ",
        1011101: "SAFETY - Missing person/abduction ",
        1011110: "SAFETY - Risk of explosion ",
        1011111: "SAFETY - Safety warning ",
        1100000: "SAFETY - Undefined flying object ",
        1100001: "SAFETY - Unidentified animal ",
        1100010: "SECURITY - Chemical attack ",
        1100011: "SECURITY - Guerrilla attack ",
        1100100: "SECURITY - Hijack ",
        1100101: "SECURITY - Shooting or danger due to weapons ",
        1100110: "SECURITY - Special forces attack ",
        1100111: "SECURITY - Terrorism ",
        1101000: "TRANSPORT - Aircraft crash ",
        1101001: "TRANSPORT - Bridge collapse ",
        1101010: "TRANSPORT - Dangerous goods accident ",
        1101011: "TRANSPORT - Inland waterway transport accident ",
        1101100: "TRANSPORT - Nautical disaster/Maritime/Marine Security ",
        1101101: "TRANSPORT - Oil spill ",
        1101110: "TRANSPORT - Road traffic incident  ",
        1101111: "TRANSPORT - Train/rail accident ",
        1110000: "TRANSPORT - Tunnel accident ",
        1110001: "OTHER - Test alert ",
        1110010: "reserved ",
        1110011: "reserved ",
        1110100: "reserved ",
        1110101: "reserved ",
        1110110: "reserved ",
        1110111: "reserved ",
        1111000: "reserved ",
        1111001: "reserved ",
        1111010: "reserved ",
        1111011: "reserved ",
        1111100: "reserved ",
        1111101: "reserved ",
        1111110: "reserved ",
        1111111: "reserved ",
    }
    """
    severity_d = {
        0: "Unknown",
        1: "Moderate - Possible threat to life or property",
        2: "Severe - Significant threat to life or property",
        3: "Extreme - Extraordinary threat to life or property",
    }
    hown_d = {
        0: "Current Week",
        1: "Next Week",
    }
    hd_d = {
        0: "Unknown",
        1: "Duration < 6H ",
        2: "6H <= Duration < 12H",
        3: "12H <= Duration < 24H ",
    }
    sol_d = {0: "International library", 1: "Country/region guidance library"}
    vol_d = {
        0: "#1",
        1: "#2",
        2: "#3",
        3: "#4",
        4: "#5",
        5: "#6",
        6: "#7",
        7: "#8",
    }
    gtrlb_d = {
        0: "",
        1: "留まれ(Stay)",
        2: "向かえ(Move to/toward)",
        3: "離れろ(Keep away from)",
    }
    gtrli_d = {
        0: "",
        1: "頑丈なものの下／中",
        2: "３階以上",
        3: "地下",
        4: "山",
        5: "水場",
        6: "工場等化学系を取扱う建物",
        7: "崖等崩れやすい場所",
        8: "Reserved",
        126: "Reserved",
        127: "直ちに命を守るための最善の行動を",
        128: "ミサイル発射。ミサイル発射。\n ミサイルが発射されたものとみられます。 \n 建物の中、又は地下に避難して下さい。",
        129: "ミサイル通過。ミサイル通過。 \n 先程のミサイルは通過したものとみられます。\n 避難の呼びかけを解除します。\n 不審なものには決して近寄らず直ちに警察や消防などに連絡して下さい。",
        130: "先程のミサイルは、海に落下したものとみられます。\n 避難の呼びかけを解除します。\n 不審なものには決して近寄らず直ちに警察や消防などに連絡して下さい。",
        131: "先程のミサイルは、我が国には飛来しないものとみられます。避難の呼びかけを解除します。\n\n It is believed that the previous missile will not come to Japan. The call for evacuation will be canceled.",
        132: "直ちに避難。直ちに避難。\n 直ちに建物の中、又は地下に避難して下さい。\n ミサイルが、周辺に落下するものとみられます。\n 直ちに避難して下さい。",
        133: "先程のミサイルは、迎撃により破壊されました。ミサイルの破片の落下の可能性があります。続報を伝達しますので、引き続き屋内に避難して下さい。",
        134: "ミサイル落下。ミサイル落下。ミサイルが、周辺に落下したものとみられます。続報を伝達しますので、引き続き屋内に避難して下さい。",
        135: "先程のミサイルは、我が国には落下しないものとみられます。避難の呼びかけを解除します。",
        136: "これは、Ｊアラートのテストです。",
        254: "Reserved for the evacuation action instruction text for J-Alert",
        255: "直ちに命を守るための最善の行動を(Take the best immediate action to save your life.)",
    }
    gtrlien_d = {
        0: "",
        1: "Under/inside a solid structure",
        2: "3rd floor or higher",
        3: "Underground",
        4: "Mountain",
        5: "Water area",
        6: "工場等化学系を取扱う建物(Building where chemicals are handled, such as a factory)",
        7: "崖等崩れやすい場所(Cliffs and areas at risk of collapse)",
        8: "Reserved",
        126: "Reserved",
        127: "直ちに命を守るための最善の行動を(Take the best immediate action to save your life.)",
        128: "ミサイル発射。ミサイル発射。\n ミサイルが発射されたものとみられます。 \n 建物の中、又は地下に避難して下さい。\n\n Missile passed, missile passed. It is believed that the previous missile has passed over the area. The call for evacuation will be canceled. If you find any suspicious object, please stay away from it and inform the police or the fire department immediately.",
        129: "ミサイル通過。ミサイル通過。 \n 先程のミサイルは通過したものとみられます。\n 避難の呼びかけを解除します。\n 不審なものには決して近寄らず直ちに警察や消防などに連絡して下さい。\n\n Missile passed, missile passed. It is believed that the previous missile has passed over the area. The call for evacuation will be canceled. If you find any suspicious object, please stay away from it and inform the police or the fire department immediately.",
        130: "先程のミサイルは、海に落下したものとみられます。\n 避難の呼びかけを解除します。\n 不審なものには決して近寄らず直ちに警察や消防などに連絡して下さい。\n\n It is believed that the previous missile has dropped in the sea. The call for evacuation will be canceled. If you find any suspicious object, please stay away from it and inform the police or the fire department immediately.",
        131: "先程のミサイルは、我が国には飛来しないものとみられます。避難の呼びかけを解除します。\n\n It is believed that the previous missile will not come to Japan. The call for evacuation will be canceled.",
        132: "直ちに避難。直ちに避難。\n 直ちに建物の中、又は地下に避難して下さい。\n ミサイルが、周辺に落下するものとみられます。\n 直ちに避難して下さい。\n\n Take shelter immediately, take shelter immediately. \n Please take shelter inside buildings or underground. \n It is believed that a missile will drop around this area. \n Please take shelter immediately.",
        133: "先程のミサイルは、迎撃により破壊されました。ミサイルの破片の落下の可能性があります。続報を伝達しますので、引き続き屋内に避難して下さい。\n\n The previous missile has been intercepted and destroyed. There is a possibility of pieces of the destroyed missile dropping. We will keep you informed. Please stay indoors for shelter.",
        134: "ミサイル落下。ミサイル落下。ミサイルが、周辺に落下したものとみられます。続報を伝達しますので、引き続き屋内に避難して下さい。\n\n Missile dropped, missile dropped. It is believed that a missile has dropped around this area. We will keep you informed. Please stay indoors for shelter.",
        135: "先程のミサイルは、我が国には落下しないものとみられます。避難の呼びかけを解除します。\n\n It is believed that the previous missile will not drop in Japan. The call for evacuation will be canceled.",
        136: "これは、Ｊアラートのテストです。\n\n This is a test message for J-Alert.",
        254: "Reserved for the evacuation action instruction text for J-Alert",
        255: "直ちに命を守るための最善の行動を(Take the best immediate action to save your life.)",
    }
    # msfss_d = {}
    # ss_d = {}
    taclt_d = {0: "都道府県(Prefecture)", 1: "市区町村(Municipality)"}
    taclpl_d = {
        0: "沖縄",
        1: "鹿児島",
        2: "宮崎県",
        3: "大分県",
        4: "熊本県",
        5: "長崎県",
        6: "佐賀県",
        7: "福岡県",
        8: "高知県",
        9: "愛媛県",
        10: "香川県",
        11: "徳島県",
        12: "山口県",
        13: "広島県",
        14: "岡山県",
        15: "島根県",
        16: "鳥取県",
        17: "和歌山県",
        18: "奈良県",
        19: "兵庫県",
        20: "大阪府",
        21: "京都府",
        22: "滋賀県",
        23: "三重県",
        24: "愛知県",
        25: "静岡県",
        26: "岐阜県",
        27: "長野県",
        28: "山梨県",
        29: "福井県",
        30: "石川県",
        31: "富山県",
        32: "新潟県",
        33: "神奈川県",
        34: "東京都",
        35: "千葉県",
        36: "埼玉県",
        37: "群馬県",
        38: "栃木県",
        39: "茨城県",
        40: "福島県",
        41: "山形県",
        42: "秋田県",
        43: "宮城県",
        44: "岩手県",
        45: "青森県",
        46: "北海道",
        80: "全土区域",
    }
    # taclpl_d = {0:"",1:"北海道", 2:"青森県", 3:"岩手県", 4:"宮城県", 5:"秋田県", 6:"山形県", 7:"福島県", 8:"茨城県", 9:"栃木県", 10:"群馬県", 11:"埼玉県", 12:"千葉県", 13:"東京都", 14:"神奈川県", 15:"新潟県", 16:"富山県", 17:"石川県", 18:"福井県", 19:"山梨県", 20:"長野県", 21:"岐阜県", 22:"静岡県", 23:"愛知県", 24:"三重県", 25:"滋賀県", 26:"京都府", 27:"大阪府", 28:"兵庫県", 29:"奈良県", 30:"和歌山県", 31:"鳥取県", 32:"島根県", 33:"岡山県", 34:"広島県", 35:"山口県", 36:"徳島県", 37:"香川県", 38:"愛媛県", 39:"高知県", 40:"福岡県", 41:"佐賀県", 42:"長崎県", 43:"熊本県", 44:"大分県", 45:"宮崎県", 46:"鹿児島", 47:"沖縄", }
    # taclpl_d = {0:"",47:"北海道", 46:"青森県", 45:"岩手県", 44:"宮城県", 43:"秋田県", 42:"山形県", 41:"福島県", 40:"茨城県", 39:"栃木県", 38:"群馬県", 37:"埼玉県", 36:"千葉県", 35:"東京都", 34:"神奈川県", 33:"新潟県", 32:"富山県", 31:"石川県", 30:"福井県", 29:"山梨県", 28:"長野県", 27:"岐阜県", 26:"静岡県", 25:"愛知県", 24:"三重県", 23:"滋賀県", 22:"京都府", 21:"大阪府", 20:"兵庫県", 19:"奈良県", 18:"和歌山県", 17:"鳥取県", 16:"島根県", 15:"岡山県", 14:"広島県", 13:"山口県", 12:"徳島県", 11:"香川県", 10:"愛媛県", 9:"高知県", 8:"福岡県", 7:"佐賀県", 6:"長崎県", 5:"熊本県", 4:"大分県", 3:"宮崎県", 2:"鹿児島", 1:"沖縄",  }

    muni_d = {
        "0000000000000000": "なし",
        "0000010001001100": "北海道札幌市",
        "0000010010110010": "北海道函館市",
        "0101000110011100": "どこかの都道府県市区町村",
    }

    sdmt = int(bin_msg[15:16], 2)
    sdm1 = int(bin_msg[16:17], 2)
    sdm2 = int(bin_msg[17:18], 2)
    sdm3 = int(bin_msg[18:19], 2)
    sdm4 = int(bin_msg[19:20], 2)
    sdm5 = int(bin_msg[20:21], 2)
    sdm6 = int(bin_msg[21:22], 2)
    sdm7 = int(bin_msg[22:23], 2)
    sdm8 = int(bin_msg[23:24], 2)
    sdm9 = int(bin_msg[24:25], 2)
    # print(sdmt,sdm1,sdm2,sdm3,sdm4,sdm5,sdm6,sdm7,sdm8,sdm9)

    dcxmt = int(bin_msg[25:27])  # A1-Message Type
    crname = int(bin_msg[27:36], 10)  # A2-Country/Region Name ex.japan:1101111

    if crname == 1101111:  # Country/Region Nameが日本国の場合

        # 基本メッセージ(122bit)
        pi = int(bin_msg[36:41], 2)  # A3-Provider Identifier
        hct = int(bin_msg[41:48], 2)  # A4-Hazard Category and Type
        severity = int(bin_msg[48:50], 2)  # A5-Severity
        hown = int(bin_msg[50:51], 2)  # A6-Hazard Onset：Week Number
        # A7-Hazard Onset：Time of Week
        hotw = datetime.timedelta(minutes=int(bin_msg[51:65], 2))
        hotwd = hotw.days  # A7-Hazard Onset：Time of Week(Day)
        hotwh, hotwm, hotws = dttd_hour_min_sec(hotw.seconds)  # A7-Hazard Onset：Time of Week(Time)
        hd = int(bin_msg[65:67], 2)  # A8-Hazard Duration
        sol = int(bin_msg[67:68])  # A9-Selection of Library
        vol = int(bin_msg[68:71], 2)  # A10-Version of Library
        # A11-Guidance to react library(Basic instruction)
        gtrlb = int(bin_msg[71:73], 2)
        # A11-Guidance to react library(Basic instruction information)
        gtrli = int(bin_msg[73:81], 2)
        eclati = int(bin_msg[81:97], 2)  # A12-Ellipse Centre Latitude
        eclong = int(bin_msg[97:114], 2)  # A13-Ellipse Centre Longitude
        elsema = int(bin_msg[114:119], 2)  # A14-Ellipse Semi-Major Axis
        elsemi = int(bin_msg[119:124], 2)  # A15-Ellipse Semi-Minor Axis
        elaz = int(bin_msg[124:130], 2)  # A16-Ellipse azimuth
        # A17-Main Subject for Specific Settings
        msfss = int(bin_msg[130:132], 2)
        # A18- Specific Settings  (J-Alertでは使用しない)
        ss = format(int(bin_msg[132:147])).zfill(15)

        # 拡張メッセージ(J-Alert 都道府県市区町村判定)
        taclt = int(bin_msg[147:148], 2)

        # 拡張メッセージ(74bit) (L-Alert)
        tac = int(bin_msg[147:163], 2)  # EX1-Target Area Code
        edt = int(bin_msg[163:164], 2)  # EX2-Evacuate Direction Type
        # EX3-Additional Ellipse Centre Latitude
        aeclati = int(bin_msg[164:181], 2)
        # EX4 Additional Ellipse Centre Longitude
        aeclong = int(bin_msg[181:198], 2)
        # EX5 Additional Ellipse Semi-Major Axis
        aesema = int(bin_msg[198:203], 2)
        # EX6 Additional Ellipse Semi-Minor Axis
        aesemi = int(bin_msg[203:208], 2)
        aeaz = int(bin_msg[208:215], 2)  # EX7 Additional Ellipse Azimuth
        vn = int(bin_msg[215:221], 2)  # Vn Version number
        reserved2 = int(bin_msg[221:227], 2)
        crc = int(bin_msg[227:251], 2)

        if taclt == 0:  # 拡張メッセージ(74bit) (J-Alert 都道府県)
            tacl = bin_msg[148:195]
            reserved = int(bin_msg[195:215], 2)
            reserved1 = int(bin_msg[212:215], 2)
            vn = int(bin_msg[215:221], 2)
            reserved2 = int(bin_msg[221:227], 2)
            crc = int(bin_msg[227:251], 2)

            plbin = tacl.zfill(47)
            plkey = [x.start() for x in re.finditer("1", str(plbin))]

            if len(plkey) == 47:  # 対象地域が47都道府県(全国)の場合は強制的に「全土区域」に直す。
                plkey = [80]  # 置換判定を利用しない時はこの行だけをコメントアウトする
                pllist = {key: taclpl_d[key] for key in plkey}
                pllist_out = [list(pllist.values())]
                pllrev = pllist_out[0][::-1]
                pllchk = str(pllrev)
                prefchk = prefset44 in prefset44
                # prefchk = prefset in pllchk

            else:
                pllist = {key: taclpl_d[key] for key in plkey}
                pllist_out = [list(pllist.values())]
                pllrev = pllist_out[0][::-1]
                pllchk = str(pllrev)
                prefchk = prefset44 in pllchk

            outputdata = [
                pab,
                mt,
                sdmt,
                sdm1,
                sdm2,
                sdm3,
                sdm4,
                sdm5,
                sdm6,
                sdm7,
                sdm8,
                sdm9,
                dcxmt,
                crname,
                pi,
                hct,
                severity,
                hown,
                hotwd,
                hotwh,
                hotwm,
                hd,
                sol,
                vol,
                gtrlb,
                gtrli,
                eclati,
                eclong,
                elsema,
                elsemi,
                elaz,
                msfss,
                ss,
                taclt,
                tacl,
                reserved,
                reserved1,
                reserved2,
                vn,
                crc,
            ]
            outputdata2 = [
                pab_d[pab],
                mt_d[mt],
                [sdmt, sdm1, sdm2, sdm3, sdm4, sdm5, sdm6, sdm7, sdm8, sdm9],
                dcxmt_d[dcxmt],
                crname_d[crname],
                pij_d[pi],
                hct_d[hct],
                severity_d[severity],
                hown_d[hown],
                hotwd,
                hotwh,
                hotwm,
                hd_d[hd],
                sol_d[sol],
                vol_d[vol],
                gtrlb_d[gtrlb],
                gtrli_d[gtrli],
                eclati,
                eclong,
                elsema,
                elsemi,
                elaz,
                msfss,
                ss,
                pllrev,
                reserved,
                reserved1,
                reserved2,
                vn,
                crc,
            ]
            textdata = "MT44 都道府県"
            """
            print(pab_d[pab],"\n",mt_d[mt],"\n"
                  ,[sdmt,sdm1,sdm2,sdm3,sdm4,sdm5,sdm6,sdm7,sdm8,sdm9],"\n"
                  ,dcxmt_d[dcxmt],"\n"
                  ,crname_d[crname],"\n"
                  ,pij_d[pi],"\n"
                  ,hct_d[hct],"\n"
                  ,severity_d[severity],"\n"
                  ,hown_d[hown],"\n"
                  ,hotwd,"\n"
                  ,hotwh,"\n"
                  ,hotwm,"\n"
                  ,hd_d[hd],"\n"
                  ,sol_d[sol],"\n"
                  ,vol_d[vol],"\n"
                  ,gtrlb_d[gtrlb],"\n"
                  ,gtrli_d[gtrli],"\n"
                  ,eclati,"\n"
                  ,eclong,"\n"
                  ,elsema,"\n"
                  ,elsemi,"\n"
                  ,elaz,"\n"
                  ,msfss,"\n"
                  ,ss,"\n"
                  ,pllrev,"\n"
                  ,reserved,"\n"
                  ,reserved1,"\n"
                  ,reserved2,"\n"
                  ,vn,"\n"
                  ,crc,)
            """
            print(
                pab_d[pab],
                pij_d[pi],
                "(",
                dcxmt_d[dcxmt],
                ")",
                "\n",
                hct_d[hct],
                "(",
                "第",
                vn,
                "報",
                ")",
                "\n" "\n",
                gtrli_d[gtrli],
                "\n" "\n",
                "対象地域",
            )
            print(*pllrev, "\n")

        elif taclt == 1:  # 拡張メッセージ(74bit) (J-Alert 市区町村)
            muni1 = format(int(bin_msg[148:164])).zfill(16)
            muni2 = format(int(bin_msg[164:180])).zfill(16)
            muni3 = format(int(bin_msg[180:196])).zfill(16)
            muni4 = format(int(bin_msg[196:212])).zfill(16)
            reserved1 = int(bin_msg[212:215], 2)
            vn = int(bin_msg[215:221], 2)
            reserved2 = int(bin_msg[221:227], 2)
            crc = int(bin_msg[227:251], 2)
            outputdata = [
                pab,
                mt,
                sdmt,
                sdm1,
                sdm2,
                sdm3,
                sdm4,
                sdm5,
                sdm6,
                sdm7,
                sdm8,
                sdm9,
                dcxmt,
                crname,
                pi,
                hct,
                severity,
                hown,
                hotwd,
                hotwh,
                hotwm,
                hd,
                sol,
                vol,
                gtrlb,
                gtrli,
                eclati,
                eclong,
                elsema,
                elsemi,
                elaz,
                msfss,
                ss,
                taclt,
                muni1,
                muni2,
                muni3,
                muni4,
                reserved1,
                reserved2,
                vn,
                crc,
            ]
            outputdata2 = [
                pab_d[pab],
                mt_d[mt],
                [sdmt, sdm1, sdm2, sdm3, sdm4, sdm5, sdm6, sdm7, sdm8, sdm9],
                dcxmt_d[dcxmt],
                crname_d[crname],
                pij_d[pi],
                hct_d[hct],
                severity_d[severity],
                hown_d[hown],
                hotwd,
                hotwh,
                hotwm,
                hd_d[hd],
                sol_d[sol],
                vol_d[vol],
                gtrlb_d[gtrlb],
                gtrli_d[gtrli],
                eclati,
                eclong,
                elsema,
                elsemi,
                elaz,
                msfss,
                ss,
                taclt_d[taclt],
                muni_d[muni1],
                muni_d[muni2],
                muni_d[muni3],
                muni_d[muni4],
                reserved1,
                reserved2,
                vn,
                crc,
            ]
            textdata = "MT44 都道府県"

    else:
        print(
            "日本国以外のCountry/Region Name値(",
            crname,
            ")を受信したためそのまま電文を出力します。\n Because Country/Region Name value (",
            crname,
            ") is other than Japan. The received message is displayed as a raw value.",
        )
        outputdata = ["Because Country/Region Name value"]

    print(
        "設定地域(",
        prefset44,
        ")が含まれているか：",
        prefchk,
    )

# MTが43、44ではない場合
else:
    print("Message TypeがMT43またはMT44に該当しません。そのまま電文を出力します。")
    outputdata = ["NOT MT43 or MT44"]

if debugmode == True:
    print("#### Debug Mode ####")
    # print("設定地域対象：", prefchk)
    print("Raw Message:", raw_msg)
    print("Bin Message:", bin_msg)
    print("OutputData:", outputdata)

    textout = list(textdata)
    textoutp = (
        sidtext,
        "\n",
        textout,
        "\n",
    )
    print("OutputText(Pack):", textoutp)
    print(type(sidtext))
    serialtext = str()

    # print("OutputText(Un Pack):", *sidtext, *textout)

    """
    # print(outputdata2)
    textrep = ",".join(textdata)
    print("textrep:", textrep)
    textout = textrep.replace("#", "")
    # print(textout.replace("'\n'", ""))
    print("TextData:", *sidtext, *textout[0])  # *textout[0]
    #serialout = str(outputdata)
    #print(ser.name)  # check which port was really used
    #ser.write(serialout.encode("utf-8"))
    #ser.write(\r\n)
    #ser.close()  # close port
    """

else:
    # print(outputdata2)
    # textout = list(textdata)
    print(outputdata)
    # print(*sidtext, *textout)


"""
tkrawmsg = ttk.Label(text=raw_msg)
tkrawmsg.place(x=5, y=10)
tkoutdata = ttk.Label(text=outputdata)
tkoutdata.place(x=5, y=30)
tkoutdata2 = ttk.Label(text=outputdata2)
tkoutdata2.place(x=5, y=50)
tkoutdata3 = ttk.Label(text=textdata)
tkoutdata3.place(x=5, y=70)
root.mainloop()
"""
print("何かキーを押すと終了します。")
input()
